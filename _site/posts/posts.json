[
  {
    "path": "posts/2023-01-14-where-should-my-family-meet/",
    "title": "Where should my family meet?",
    "description": "Or a mathematical way to evade the debate on the location of the next holidays.",
    "author": [
      {
        "name": "Etienne Bacher",
        "url": {}
      }
    ],
    "date": "2023-01-14",
    "categories": [],
    "contents": "\nLike many others, my family is quite split geographically: some are in Europe but\nin different countries, and some are in other continents. Given this distance\nbetween us, we don’t gather in a single place that often.\nThis got me thinking: in which place should we meet if we wanted to minimize the\ntotal distance, i.e the sum of the distances made by each one? I’m just thinking\nin terms of distance as the crow flies, because of course the distance also depends\non where we must go to take the plane, on the potential flight connections we have\nto make, etc.\nThis question is frequent in a lot of optimal location problems. For example,\nwhere should a factory be built so that it minimizes the sum of distances to a\nlist of warehouses? However, I didn’t know about it before thinking about my\noriginal question, and it’s not as simple as it looked like to me. I thought a\nbit more about that, searched online, asked to other members of my family more\ncomfortable with maths, and this blog post summarizes what I learnt from that.\nAs every other post on this blog, it will include some R code, but that will\ncome later.\nThe problem on a 2D plan\nThe question I want to answer is: where should my family meet in order to minimize\nthe total distance? Something that is not clearly mentioned here is that I want\nto minimize the total distance on a sphere (because, surprise, the Earth is\nclose to a sphere). This adds a layer of complexity, so let’s start with a 2D\nanalysis.\nSuppose I have 5 points placed on a grid like below:\n\n\n\n\n\nI want to find the point \\((X,Y)\\) that minimizes the sum of distances from each\npoint to \\((X,Y)\\). Here, I use the Euclidean distance, but other measures\nare possible (such as the Manhattan distance). The formula for the Euclidean distance between two points \\((x_1, y_1)\\) and \\((x_2, y_2)\\) is:\n\\[dist = \\sqrt{(x_1-x_2)^2 + (y_1-y_2)^2}\\]\nFor example, the distance between the points \\((1,0)\\) and \\((2,1)\\) is1:\n\\[\\begin{align}\ndist = & \\sqrt{(1-2)^2 + (0-1)^2}\\\\\n= & \\sqrt{1+1} \\\\\n= & \\sqrt{2}\n\\end{align}\\]\nHere, I want to find the point \\((X,Y)\\) that minimizes:\n\\[Total \\ distance = D = \\sum_{i=1}^5\\sqrt{(x_i-X)^2 + (y_i-Y)^2}\\]\nThe point \\((X,Y)\\) that solves this is called the geometric median, or \\(L_1\\)-median. If we\nonly had two points, then any point on the segment between those two points would\nbe a solution2, but here, we have five points.\nHowever, according to Wikipedia,\n\nDespite the geometric median’s being an easy-to-understand concept, computing it\nposes a challenge. […] Therefore, only numerical or symbolic approximations to\nthe solution of this problem are possible under this model of computation.\n\nIn other words, while it is theoretically possible to compute the exact solution\nto this problem, it is impossible to do so in reasonable time in practice when\nthe number of points is very large (note that there are some special cases, such\nas \\(n=3\\) or \\(n=4\\)). This is why we need to use an approximation algorithm.\nWe can use the Nelder-Mead method, which is a common method for function\nminimization. We first take a starting point, say \\((0, 0)\\). Two other points\nwill be taken randomly. Then, the algorithm computes the function we want to\nminimize (here, the total distance) for each of the three random points. The two\nlowest points are kept, and the algorithm replaces the third one by its symmetric\npoint relative to the line between the two lowest points. But an animation is\nworth a thousand words:\n\n Animation by Nicoguaro - Own work, CC BY 4.0, https://commons.wikimedia.org/w/index.php?curid=51597575 \nIn the animation above, the triangle moves and shrinks until it reaches the\nminimum. There are more available options than just reflecting the highest point.\nI found these two blog posts very helpful to understand how the Nelder-Mead\nmethod works:\nby Mathias Brandewinder\nby Alex Dowad\nAnother algorithm that is commonly used for that is the Weiszfeld algorithm. The\nidea is to start from a point \\((X_0, Y_0)\\), update it using its derivatives to\nget \\((X_1, Y_1)\\), and continue this process until the distance between two updates\nis under a certain threshold. I won’t use this method here, so click on the arrow\nbelow if you want more details.\n\nClick here to have more details about Weiszfeld algorithm and its R implementation.\n\nList of steps in Weiszfeld algorithm:\npick a random point \\(P_0 = (X_0, Y_0)\\)\ncompute \\(X_1 = \\frac{\\sum_{i=1}^5 \\frac{x_i}{\\sqrt{(x_i-X_0)^2 + (y_i-Y_0)^2}}}{\\sum_{i=1}^5 \\frac{1}{\\sqrt{(x_i-X_0)^2 + (y_i-Y_0)^2}}}\\) and \\(Y_1 = \\frac{\\sum_{i=1}^5 \\frac{x_i}{\\sqrt{(x_i-X_0)^2 + (y_i-Y_0)^2}}}{\\sum_{i=1}^5 \\frac{1}{\\sqrt{(x_i-X_0)^2 + (y_i-Y_0)^2}}}\\)\ncompute the distance \\(\\varepsilon\\) between \\((X_0, Y_0)\\) and \\((X_1, Y_1)\\)\nrepeat steps 2 and 3 until \\(\\varepsilon\\) is lower than an arbitrary threshold. This will give an approximate solution \\((X, Y)\\).\nTo get the expressions above, we differentiate with respect to \\(X\\):\n\\[\\begin{equation}\n\\frac{\\partial D}{\\partial X} = 0 \\\\\n\\sum_{i=1}^5\\frac{\\partial \\sqrt{(x_i-X)^2 + (y_i-Y)^2}}{\\partial X} = 0 \\\\\n\\sum_{i=1}^5 -\\frac{- 2x_i + 2X}{2\\sqrt{(x_i-X)^2 + (y_i-Y)^2}} = 0 \\\\\n\\sum_{i=1}^5 \\frac{x_i - X}{\\sqrt{(x_i-X)^2 + (y_i-Y)^2}} = 0 \\\\\n\\sum_{i=1}^5 \\frac{x_i}{\\sqrt{(x_i-X)^2 + (y_i-Y)^2}} - \\sum_{i=1}^5 \\frac{X}{\\sqrt{(x_i-X)^2 + (y_i-Y)^2}} = 0 \\\\\n\\sum_{i=1}^5 \\frac{x_i}{\\sqrt{(x_i-X)^2 + (y_i-Y)^2}} - X \\sum_{i=1}^5 \\frac{1}{\\sqrt{(x_i-X)^2 + (y_i-Y)^2}} = 0 \\\\\nX = \\ \\frac{\\sum_{i=1}^5 \\frac{x_i}{\\sqrt{(x_i-X)^2 + (y_i-Y)^2}}}{\\sum_{i=1}^5 \\frac{1}{\\sqrt{(x_i-X)^2 + (y_i-Y)^2}}} \\\\\nX^* = \\ T(X^*)\n\\end{equation}\\]\nSimilarly,\n\\[\\begin{align}\nY^* = & \\ \\frac{\\sum_{i=1}^5 \\frac{x_i}{\\sqrt{(x_i-X)^2 + (y_i-Y^*)^2}}}{\\sum_{i=1}^5 \\frac{1}{\\sqrt{(x_i-X)^2 + (y_i-Y^*)^2}}} \\\\\nY^* = & \\ T(Y^*)\n\\end{align}\\]\nNow, we can make a loop like the following:\nstart with \\(X = X_0\\) and \\(Y = Y_0\\), and compute \\(X_1 = T(X_0)\\) and \\(Y_1 = T(Y_0)\\)\ncompute \\(X_2 = T(X_1)\\) and \\(Y_2 = T(Y_1)\\)\ncontinue until the distance between \\((X_n, X_{n+1})\\) and \\((Y_n, Y_{n+1})\\) is smaller than an arbitrary \\(\\varepsilon\\).\nOnce again, I’m not mathematician, so this may seem not rigorous at all for someone with more experience. If you’re interested in a rigorous explanation of Weiszfeld’s algorithm, check out this paper (but there are many others online).\n\nAs usual with R, when you think of a widely used algorithm or feature, there’s necessarily an R package for that. Here, I will use the package Gmedian and the function Weiszfeld():\n\n\nlibrary(Gmedian)\n\n\nThis function has 4 arguments:\nX is a matrix of points, where each row is an observation;\nweights is useful if we want to give more importance to some points. Here, we assume that all 4 points are equally important, so we set it to NULL (the default);\nepsilon is the threshold below which the algorithm will stop;\nnitermax is the maximum number of iterations that will be run. This is complementary to epsilon: the algorithm stops as soon as the difference between two \\((X, Y)\\) is lower than epsilon or as the algorithm hits the maximum number of iterations.\nWe can keep the defaults for epsilon and nitermax, so we just need to create a matrix containing our four points, and run this in Weiszfeld():\n\n\n# Create matrix\nmy_points <- rbind(c(1, 0), c(2, 1), c(-3, 0), c(0, 3), c(-2,2))\nmy_points\n\n     [,1] [,2]\n[1,]    1    0\n[2,]    2    1\n[3,]   -3    0\n[4,]    0    3\n[5,]   -2    2\n\nmedian_point <- Weiszfeld(my_points)\nmedian_point\n\n$median\n           [,1]    [,2]\n[1,] -0.2704185 1.36027\n\n$iter\n[1] 33\n\nWe can now compute the sum of distances between each original point and the geometric median:\n\n\nlist_dist <- c()\nfor (i in 1:nrow(my_points)) {\n  foo <- my_points[i, ]\n  list_dist[i] <- dist(rbind(foo, median_point$median))\n}\nsum(list_dist)\n\n[1] 10.71581\n\nWe can use the Nelder-Mead algorithm in R with the function optim() in the\nstats package (included in base R). First, we write the objective function and\nfeed optim() with it, along with the parameters (our list of points and a point\nfrom which to start).\n\n\n# Inputs:\n# - starting_p: a vector (x, y) indicating from which point to start\n# - my_p: a matrix where each row is a point in our list\ncriterion_2D <- function(starting_p, my_p) {\n  # Formula for the sum of Euclidean distances\n  f <- sum(sqrt((starting_p[1] - my_p[, 1])^2 + (starting_p[2] - my_p[, 2])^2))\n}\n\noutput <- optim(par = c(0, 0), criterion_2D, my_p = my_points)\n\n# Location of the optimal point\noutput$par\n\n[1] -0.2701872  1.3599835\n\n# Total distance\noutput$value\n\n[1] 10.71581\n\nAs we can see, this solution automatically gives us the optimal location and the\ntotal distance. It also doesn’t require an external package, which is interesting\nif you want to reduce the dependencies you use. In the example above, the optimal point is therefore at (-0.27, 1.36),\nand the total distance is 10.72:\n\n\n\nNow that we know how to solve the problem in 2D, let’s move to 3D with a sphere,\nwhere it is slightly more complicated.\nThe problem with a sphere\nFinding points on a sphere\nPoints on a sphere are often referred to by their latitude and longitude. However,\nif we want to compute the distance between points on a sphere, we need to get\n3 coordinates \\((x,y,z)\\). How do we do that?\nFirst, we have to change the unit of the points to use radians instead of degrees.\nThis is done by multiplying the values in degrees by pi and dividing them by 180.\nThen, we need to compute the 3 coordinates \\(x\\), \\(y\\), and \\(z\\) as follows:\n\\(x = cos(latitude) \\times cos(longitude) \\times R\\)\n\\(y = cos(latitude) \\times sin(longitude) \\times R\\)\n\\(z = sin(latitude) \\times R\\)\nwhere \\(R\\) is the radius of the sphere.\nLet’s make an example. We define some random points on a sphere with their\nlatitude and longitude in degrees:\n\n\n# R = earth radius (km) \nR <- 6200\n\n# Latitude, longitude for a few locations in degrees\nlatitude <- c(45, -40, 30, -30)\nlongitude <- c(-10, 10, 50, 50)\n\n# Convert to radians\nlatitude_r <- latitude * pi / 180\nlongitude_r <- longitude * pi / 180\n\n# x,y,z coordinates for the locations\nx <- cos(latitude_r) * cos(longitude_r) * R\ny <- cos(latitude_r) * sin(longitude_r) * R\nz <- sin(latitude_r) * R\n\nmy_points <- cbind(x,y,z)\nmy_points\n\n            x         y         z\n[1,] 4317.458 -761.2844  4384.062\n[2,] 4677.320  824.7378 -3985.283\n[3,] 3451.356 4113.1665  3100.000\n[4,] 3451.356 4113.1665 -3100.000\n\nComputing the distance\nWe know how to express the location of points using three coordinates. We can now\nthink about how we will measure the distance between these points.\nSuppose we have two points, \\(P_1\\) and \\(P_2\\), and we want to measure the distance\n\\(l\\). If we were in an Euclidean space, we would compute the distance \\(d\\) between\nthe two points, which is equal to \\(\\sqrt{(x_1-x_2)^2 + (y_1-y_2)^2 + (z_1-z_2)^2}\\),\nbut that’s not what we’re looking for because it doesn’t take into account the\ncurvature of the sphere.\n\n\n\nBy definition, \\(l = R \\times \\theta\\). We know the radius, so we need to compute\n\\(\\theta\\). The triangle is isosceles, so dividing the angle in two equal parts\nwill give us two rectangle triangles where we can compute \\(\\frac{\\theta}{2}\\).\nIndeed,\n\\[sin(\\frac{\\theta}{2}) = \\frac{d/2}{R} \\]\n\\[\\frac{\\theta}{2} = arcsin(\\frac{d/2}{R})\\]\n\\[\\theta = 2 \\times arcsin(\\frac{d/2}{R})\\]\n\n\n\nTherefore, we have:\n\\[l = 2R \\times arcsin(\\frac{d/2}{R})\\]\nNow that we have a way to measure the distance between two points based on their\n3 coordinates, we can follow the same procedure as in the 2D case: make a\nfunction and give it to optim(). However, the objective function to minimize\nis different because we now use the formula above for the distance.\n\n\n# Inputs:\n# - starting_p: a vector (lat, long, both in degrees) indicating from which point to start\n# - my_p: a matrix where each row is a point in our list, and 3 columns (one for\n#   each dimension)\ncriterion_3D <- function(starting_p, my_p) {\n  # Convert degrees in radians\n  plat <- starting_p[1] * pi / 180\n  plon <- starting_p[2] * pi / 180\n  # Compute the x, y, z coordinates\n  x <- cos(plat) * cos(plon) * R\n  y <- cos(plat) * sin(plon) * R\n  z <- sin(plat) * R\n\n  # Return the total distance\n  sum(\n    2*R*asin(\n      sqrt(\n        (x - my_points[, 1])^2 + (y - my_points[, 2])^2 + (z - my_points[, 3])^2\n      )\n    / 2 /R)\n  )\n}\n\n\nWe can now apply once again the optim() function:\n\n\n# Initial point (latitude, longitude, in degrees)\ny <- optim(c(0,0), criterion_3D, my_p = my_points) \ny$par\n\n[1] -4.532362 31.660719\n\ny$value\n\n[1] 18606.59\n\nSo in this dummy example, the optimal location is in -4.53°\nlat., 31.66° long., and the total distance\n18606.59 km.\nMaking an interactive globe\nNow the most important part: show the solution on a globe! There are several ways\nto do this. One of them is to use echarts4r:\n\n\nlibrary(echarts4r)\nlibrary(echarts4r.assets)\ncoords <- data.frame(\n  lat = latitude,\n  long = longitude,\n  lat_sol = y$par[1],\n  long_sol = y$par[2]\n)\n\ncoords |> \n  e_charts() |> \n  \n  # create the globe\n  e_globe(\n    base_texture = ea_asset(\"world\"), \n    displacementScale = 0.05,\n    shading = \"color\",\n    viewControl = list(autoRotate = FALSE, targetCoord = c(10, 0))\n  ) |> \n  \n  # add the starting points\n  e_scatter_3d(\n    long, lat,\n    coord_system = \"globe\",\n    symbolSize = 15,\n    itemStyle = list(color = \"red\"),\n    emphasis = list(label = list(show = FALSE))\n  ) |> \n  \n  # add the solution\n  e_scatter_3d(\n    long_sol, lat_sol,\n    coord_system = \"globe\",\n    symbolSize = 15,\n    itemStyle = list(color = \"yellow\")\n  ) |> \n  \n  # add tooltip with latitude and longitude (only works for\n  # starting points)\n  e_tooltip(\n    trigger = \"item\",\n    formatter = htmlwidgets::JS(\"\n      function(params){\n        return('Longitude: ' + params.value[0] + '<br />Latitude: ' + params.value[1])\n      }\n    \")\n  ) |> \n  e_legend(FALSE)\n\n\n\nWe now have a solution, but the question is: what if the optimal meeting point is\nlocated in the middle of the Pacific Ocean? That wouldn’t be the most convenient\npoint for a family meeting (unless you have a yacht).\nSo far, we didn’t care about this. We did some unconstrained optimization. The\nnext step is to add the constraint that the meeting cannot happen at a place covered by oceans. I will try to explore that in a future post, but so far I\ndidn’t find many resources on this. If you have some ideas on how to do this or\nwhere to start from, feel free to let a comment.\nThanks for having read so far!\n\nTo be sure,\nwe know that the distance between those two points is the diagonal of a square\nwith sides of length 1, and that the length of the diagonal of a square with\nsides of length \\(a\\) is \\(a\\sqrt{2}\\).↩︎\nFor example, if the two points are separated by 1000 km, then\nputting the meeting point at 200 km from one and 800 km from the other would give\nthe same total distance as putting the meeting point at 500 km far from each\npoint.↩︎\n",
    "preview": "posts/2023-01-14-where-should-my-family-meet/distill-preview.png",
    "last_modified": "2023-02-16T14:16:35+00:00",
    "input_file": {},
    "preview_width": 1382,
    "preview_height": 1076
  },
  {
    "path": "posts/2022-11-28-some-notes-about-improving-base-r-code/",
    "title": "Some notes about improving base R code",
    "description": "A small collection of tips to make base R code faster.",
    "author": [
      {
        "name": "Etienne Bacher",
        "url": {}
      }
    ],
    "date": "2022-11-28",
    "categories": [],
    "contents": "\nPreview image coming from: https://trainingindustry.com/magazine/nov-dec-2018/life-in-the-fast-lane-accelerated-continuous-development-for-fast-paced-organizations/\nLately I’ve spent quite some time on packages that require (almost) only base R:\ndatawizard, a package belonging to the easystats ecosystem, whose goal is to\nprovide tools for data wrangling and statistical transformations;\npoorman, whose goal is to reproduce tidyverse functions (with a strong focus\non dplyr) using base R only.\nI’ve used bench::mark() and profvis::profvis() a lot to improve code performance\nand here are a few things I learnt. By default, bench::mark() checks that all\nexpressions return the same output, so we can be confident that the alternatives\nI show in this post are truly equivalent.\nBefore we start, I want to precise a few things.\nFirst, these performance improvements are targeted to package developers. A\nrandom user shouldn’t really care if a function takes 200 milliseconds less to\nrun. However, I think a package developer might find these tips interesting.\nSecond, if you find some ways to speed up my alternatives, feel free to comment.\nI know that there are a bunch of packages whose reputation is built on being very\nfast (for example data.table and collapse). I’m only showing some base R\ncode alternatives here.\nFinally, here’s a small function that I use to make a classic dataset\n(like iris or mtcars) much bigger.\n\n\nmake_big <- function(data, nrep = 500000) {\n  tmp <- vector(\"list\", length = nrep)\n  for (i in 1:nrep) {\n    tmp[[i]] <- data\n  }\n  \n  data.table::rbindlist(tmp) |> \n    as.data.frame()\n}\n\n\nCheck if a vector has a single value\nOne easy way to do this is to run length(unique(x)) == 1, which basically means\nthat first we have to collect all unique values and then count them. This can be\nquite inefficient: it would be enough to stop as soon as we find two different\nvalues.\nWhat we can do is to compare all values to the first value of the vector. Below is\nan example with a vector containing 1 million values. In the first case, it only\ncontains 1, and in the second case it contains 1 and 2.\n\n\n# Should be TRUE\ntest <- rep(1, 1e7)\n\nbench::mark(\n  length(unique(test)) == 1,\n  all(test == test[1]),\n  iterations = 10\n)\n\n# A tibble: 2 × 6\n  expression                     min   median itr/se…¹ mem_a…² gc/se…³\n  <bch:expr>                <bch:tm> <bch:tm>    <dbl> <bch:b>   <dbl>\n1 length(unique(test)) == 1  129.7ms  138.6ms     6.90 166.1MB    6.90\n2 all(test == test[1])        36.7ms   48.2ms    18.9   38.1MB    3.77\n# … with abbreviated variable names ¹​`itr/sec`, ²​mem_alloc, ³​`gc/sec`\n\n# Should be FALSE\ntest2 <- rep(c(1, 2), 1e7)\n\nbench::mark(\n  length(unique(test2)) == 1,\n  all(test2 == test2[1]),\n  iterations = 10\n)\n\n# A tibble: 2 × 6\n  expression                      min   median itr/s…¹ mem_a…² gc/se…³\n  <bch:expr>                 <bch:tm> <bch:tm>   <dbl> <bch:b>   <dbl>\n1 length(unique(test2)) == 1  328.1ms    357ms    2.72 332.3MB    2.72\n2 all(test2 == test2[1])       62.4ms     74ms   12.3   76.3MB    2.45\n# … with abbreviated variable names ¹​`itr/sec`, ²​mem_alloc, ³​`gc/sec`\n\nThis is also faster for character vectors:\n\n\n# Should be FALSE\ntest3 <- rep(c(\"a\", \"b\"), 1e7)\n\nbench::mark(\n  length(unique(test3)) == 1,\n  all(test3 == test3[1]),\n  iterations = 10\n)\n\n# A tibble: 2 × 6\n  expression                      min   median itr/s…¹ mem_a…² gc/se…³\n  <bch:expr>                 <bch:tm> <bch:tm>   <dbl> <bch:b>   <dbl>\n1 length(unique(test3)) == 1    288ms  314.7ms    3.01 332.3MB    3.01\n2 all(test3 == test3[1])         66ms   79.7ms   11.6   76.3MB    2.32\n# … with abbreviated variable names ¹​`itr/sec`, ²​mem_alloc, ³​`gc/sec`\n\nConcatenate columns\nSometimes we need to concatenate columns, for example if we want to create a\nunique id from several grouping columns.\n\n\ntest <- data.frame(\n  origin = c(\"A\", \"B\", \"C\"),\n  destination = c(\"Z\", \"Y\", \"X\"),\n  value = 1:3\n)\n\ntest <- make_big(test)\n\n\nOne option to do this is to combine paste() and apply() using MARGIN = 1 to\napply paste() to each row. However, a faster way to do this is to use do.call()\ninstead of apply():\n\n\nbench::mark(\n  apply = apply(test[, c(\"origin\", \"destination\")], 1, paste, collapse = \"_\"),\n  do.call = do.call(paste, c(test[, c(\"origin\", \"destination\")], sep = \"_\"))\n)\n\n# A tibble: 2 × 6\n  expression      min   median `itr/sec` mem_alloc `gc/sec`\n  <bch:expr> <bch:tm> <bch:tm>     <dbl> <bch:byt>    <dbl>\n1 apply         7.68s    7.68s     0.130    80.1MB     5.60\n2 do.call     91.81ms 114.78ms     8.55     11.4MB     0   \n\nGiving attributes to large dataframes\nThis one comes from these StackOverflow question and answer. Manipulating a dataframe can remove some attributes. For example, if I give an\nattribute foo to a large dataframe:\n\n\norig <- data.frame(x1 = rep(1, 1e7), x2 = rep(2, 1e7))\nattr(orig, \"foo\") <- TRUE\nattr(orig, \"foo\")\n\n[1] TRUE\n\nIf I reorder the columns, this attribute disappears:\n\n\nnew <- orig[, c(2, 1)]\nattr(new, \"foo\")\n\nNULL\n\nWe can put it back with:\n\n\nattributes(new) <- utils::modifyList(attributes(orig), attributes(new))\nattr(new, \"foo\")\n\n[1] TRUE\n\nBut this takes some time because we also copy the 10M row names of the\ndataset. Therefore, one option is to create a custom function that only copies the\nattributes that were in orig but are not in new (in this case, only attribute\nfoo is concerned):\n\n\nreplace_attrs <- function(obj, new_attrs) {\n  for(nm in setdiff(names(new_attrs), names(attributes(data.frame())))) {\n    attr(obj, which = nm) <- new_attrs[[nm]]\n  }\n  return(obj)\n}\n\nbench::mark(\n  old = {\n    attributes(new) <- utils::modifyList(attributes(orig), attributes(new))\n    head(new)\n  },\n  new = {\n    new <- replace_attrs(new, attributes(orig))\n    head(new)\n  }\n)\n\n# A tibble: 2 × 6\n  expression      min   median `itr/sec` mem_alloc `gc/sec`\n  <bch:expr> <bch:tm> <bch:tm>     <dbl> <bch:byt>    <dbl>\n1 old          52.4ms   58.9ms      16.5    38.2MB     2.75\n2 new          48.3µs   60.3µs   12662.     24.4KB     4.48\n\nFind empty rows\nIt can be useful to remove empty rows, meaning rows containing only NA or \"\".\nWe could once again use apply() with MARGIN = 1, but a faster way is to use\nrowSums(). First, we create a data frame full of TRUE/FALSE with is.na(test) | test == \"\",\nand then we count by row the number of TRUE. If this number is equal to the number\nof columns, then it means that the row only has NA or \"\".\n\n\ntest <- data.frame(\n  a = c(1, 2, 3, NA, 5),\n  b = c(\"\", NA, \"\", NA, \"\"),\n  c = c(NA, NA, NA, NA, NA),\n  d = c(1, NA, 3, NA, 5),\n  e = c(\"\", \"\", \"\", \"\", \"\"),\n  f = factor(c(\"\", \"\", \"\", \"\", \"\")),\n  g = factor(c(\"\", NA, \"\", NA, \"\")),\n  stringsAsFactors = FALSE\n)\n\ntest <- make_big(test, 100000)\n\nbench::mark(\n  apply = which(apply(test, 1, function(i) all(is.na(i) | i == \"\"))),\n  rowSums = which(rowSums((is.na(test) | test == \"\")) == ncol(test))\n)\n\n# A tibble: 2 × 6\n  expression      min   median `itr/sec` mem_alloc `gc/sec`\n  <bch:expr> <bch:tm> <bch:tm>     <dbl> <bch:byt>    <dbl>\n1 apply         1.82s    1.82s     0.551   112.9MB     4.96\n2 rowSums    704.78ms 704.78ms     1.42     99.7MB     0   \n\nConclusion\nThese were just a few tips I discovered. Maybe there are ways to make them even\nfaster in base R? Or maybe you know some weird/hidden tips? If so, feel free to\ncomment below!\n\n\n\n",
    "preview": "posts/2022-11-28-some-notes-about-improving-base-r-code/fast.jpeg",
    "last_modified": "2023-02-16T14:16:35+00:00",
    "input_file": {}
  },
  {
    "path": "posts/2021-12-27-mapping-french-rivers-network/",
    "title": "Mapping French rivers network",
    "description": "",
    "author": [
      {
        "name": "Etienne Bacher",
        "url": {}
      }
    ],
    "date": "2021-12-27",
    "categories": [],
    "contents": "\nSpanish rivers network, by Dominic RoyéOnce again inspired by Dominic Royé’s maps, I decided to map rivers in France. The dataset I use comes from HydroSHEDS. The code below is quite similar to the code in my previous post so I don’t spend a lot of time on it.\n\n\nlibrary(ggplot2)\nlibrary(ggtext)\nlibrary(sf)\nlibrary(rnaturalearth)\n\n\n\n\n\nfrance <- ne_countries(country = \"France\", scale = 'medium',\n                       type = 'map_units', returnclass = 'sf')  \n\nrivers_30sec <- read_sf(\"eu_riv_30s/eu_riv_30s.shp\") |>\n  st_intersection(france)\n\n\n\n\n\nx <- ggplot() +\n  geom_sf(\n    data = rivers_30sec, \n    color = \"#002266\"\n  ) +\n  labs(\n    title = \"Rivers network in France\",\n    subtitle = \"This map displays 18,099 rivers. These are<br> measured at a grid resolution of 30 arc-seconds<br> (approx. 1km at the equator).\",\n    caption = \"Made by Etienne Bacher &middot; Data from HydroSHEDS\"\n  ) +\n  theme_void() +\n  theme(\n    plot.background = element_rect(fill = \"white\", color = \"white\"),\n    panel.background = element_rect(fill = \"white\", color = \"white\"),\n    plot.title = element_markdown(hjust = 0.5, size = 30, margin = margin(t = 10, b = -20)),\n    plot.subtitle = element_markdown(margin = margin(t = 40, b = -60, l = 10), size = 12),\n    plot.caption = element_markdown(hjust = 0.5, margin = margin(l = 10, b = 20, t = -30)),\n    text = element_text(family = \"Roboto Condensed\")\n  )\n\nggsave(\"france_30sec.png\", plot = x, width = 8, height = 8)\n\n\n\n\nThis plot shows the density of rivers in France. Now, if we want to show which rivers are the most important, we can modify the opacity of the lines depending on their flow:\n\n\nx <- ggplot() +\n  geom_sf(\n    data = rivers_30sec, \n    mapping = aes(alpha = UP_CELLS),\n    color = \"#002266\"\n  ) +\n  labs(\n    title = \"Rivers network in France\",\n    subtitle = \"This map displays 18,099 rivers. These are<br> measured at a grid resolution of 30 arc-seconds<br> (approx. 1km at the equator). Line opacity<br> represents the size of the flow.\",\n    caption = \"Made by Etienne Bacher &middot; Data from HydroSHEDS\"\n  ) +\n  theme_void() +\n  theme(\n    plot.background = element_rect(fill = \"white\", color = \"white\"),\n    panel.background = element_rect(fill = \"white\", color = \"white\"),\n    plot.title = element_markdown(hjust = 0.5, size = 30, margin = margin(t = 10, b = -20)),\n    plot.subtitle = element_markdown(margin = margin(t = 40, b = -60, l = 10), size = 12),\n    legend.position = \"none\",\n    plot.caption = element_markdown(hjust = 0.5, margin = margin(l = 10, b = 20, t = -30)),\n    text = element_text(family = \"Roboto Condensed\")\n  )\n\nggsave(\"france_30sec_opac.png\", plot = x, height = 8, width = 8)\n\n\n\n\n\n\n\n",
    "preview": "posts/2021-12-27-mapping-french-rivers-network/france_30sec_opac.png",
    "last_modified": "2023-02-16T14:16:35+00:00",
    "input_file": {},
    "preview_width": 2400,
    "preview_height": 2400
  },
  {
    "path": "posts/2021-12-23-reproduce-some-maps-about-3g-and-4g-access/",
    "title": "Reproduce some maps about 3G and 4G access",
    "description": "I try to reproduce some maps made by Dominic Royé.",
    "author": [
      {
        "name": "Etienne Bacher",
        "url": {}
      }
    ],
    "date": "2021-12-23",
    "categories": [],
    "contents": "\nA few weeks ago, I found out about some maps made by Dominic Royé (see his gallery for more graphs). Among all those beautiful graphs, I decided to try reproducing those on 3G and 4G cell towers redistribution, like the one below for France.\nThis is the original plot, by Dominic Royé.Note that what I do here is just reproducing some maps to train with spatial data. All credits for the original maps go to Dominic Royé.\nBefore we start, these are the packages we will need:\n\n\nlibrary(dplyr)\nlibrary(readr)\nlibrary(ggplot2)\nlibrary(ggtext)\nlibrary(sf)\nlibrary(rnaturalearth)\n\n\n\nNote that I will use native pipes |>, that are only available with R 4.1.0 and later versions. If your version is older, you can simply replace those by %>% from the package magrittr.\nObtain and treat the data\nObtain the data\nAs mentioned in the original plot, the data on cell towers location come from OpenCellid, which is a community-created dataset containing the location of cell towers for several radio signals: LTE, UMTS and GSM.\nThis data is free to obtain, we only need to register with an email address and to precise the general purpose for which we want to obtain the data. We can then choose the country and download the data in a CSV file. Note that this dataset is updated daily, so the map could be a bit different if you do it much later.\nTreat the data\nThe data treatment is actually very simple because the data is already very tidy. The only thing to do here is to add geographical attributes to the dataframe with st_as_sf():\n\n\ncelltowers <- read_csv(\"208.csv\") |> \n  st_as_sf(coords = c(\"lon\", \"lat\"), crs = 4326)\n\n\n\nWhile playing with the data, I noticed that the dates of creation of cell towers are expressed in seconds (more precisely in UNIX timestamp), so if we want to convert these as more natural dates, we can use lubridate::as_datetime(). I didn’t use the dates to make the maps but it’s still useful to know how to do that.\nPlot the data\nWe have three things to do:\nplot an empty map of France;\nadd 3G cell towers location;\nadd 4G cell towers location;\nPlot an empty map of France\nTo do that, we can use the package rnaturalearth:\n\n\nfrance <- ne_countries(scale = 'medium', type = 'map_units', returnclass = 'sf') |>\n  filter(name == 'France') \n\n\n\nWe can already plot that:\n\n\nggplot() + \n  geom_sf(data = france)\n\n\n\n\nAdd 3G and 4G cell towers location\nWhile plotting those cell towers location, I noticed that, for some reason, some were located outside of France. Therefore, I chose keep only the locations that are inside the map of France we have. This can be done with sf::st_intersection(). Following Dominic Royé, I also separate 3G (UMTS) and 4G (LTE) cell towers (this step is time consuming):\n\n\nUMTS <- celltowers |> \n  filter(radio == \"UMTS\") |>\n  st_intersection(france)\n\nLTE <- celltowers |> \n  filter(radio == \"LTE\") |>\n  st_intersection(france)\n\n\n\nNow, we could plot all those points, but there are so many that it would completely hide the map so we need to use the smallest size possible for each point. Contrary to what one might expect, this is not done with the size argument but with the shape argument. Indeed, setting shape = \".\" means that each point will be the size of one pixel1. Still there are too many points compared to the original plot. The solution here is to decrease the opacity of each point:\n\n\nggplot() + \n  geom_sf(data = france, fill = \"black\", color = \"white\", size = 0.3) + \n  geom_sf(data = UMTS, shape = \".\", color = \"#4d88ff\", alpha = 0.3) +\n  geom_sf(data = LTE, shape = \".\", color = \"#cc0000\", alpha = 0.5)\n\n\n\n\nNow, we simply have to customize the plot a bit and to add labels, and we’re done! Here is the final plot (this is time consuming because of the large number of points):\n\n\nx <- ggplot() + \n  geom_sf(data = france, fill = \"black\", color = \"white\", size = 0.3) + \n  geom_sf(data = UMTS, shape = \".\", color = \"#4d88ff\", alpha = 0.3) +\n  geom_sf(data = LTE, shape = \".\", color = \"#cc0000\", alpha = 0.5) +\n  theme_void() +\n  labs(\n    title = \"<span style='color: white; text-align: center;'>Cell tower distribution with <br> <span style='color: #cc0000'>4G<\/span> (LTE) and <span style='color: #4d88ff'>3G<\/span> (UMTS)<\/span>\",\n    caption = \"<span style='color: white;'> Made by Etienne Bacher <b>&middot;<\/b> Original plot by Dominic Royé <b>&middot;<\/b> Data from opencellid.org <\/span>\"\n  ) +\n  theme(\n    plot.background = element_rect(fill = \"black\"),\n    panel.background = element_rect(fill = \"black\"),\n    plot.title = element_markdown(margin = margin(t = 40, b = -60, l = 10), size = 20),\n    plot.caption = element_markdown(hjust = 0, margin = margin(l = 10, b = 20, t = -30)),\n    text = element_text(family = \"Roboto Condensed\")\n  )\n\nggsave(\"my_plot_fr.png\", plot = x, height = 7, width = 7)\n\n\n\nMy reproduction of the plotIf you want to do it for another country than France, such as England, you can simply download the data for England on opencellid.org, use the map of England from rnaturalearth, apply the same code as above, and voilà!\n\n\nShow code\n\ncelltowers_eng <- read_csv(\"234.csv\") |> \n  st_as_sf(coords = c(\"lon\", \"lat\"), crs = 4326)\n\neng <- ne_countries(scale = 'medium', type = 'map_units', returnclass = 'sf') |>\n  filter(name == 'England') \n\nUMTS <- celltowers_eng |> \n  filter(radio == \"UMTS\") |>\n  st_intersection(eng)\n\nLTE <- celltowers_eng |> \n  filter(radio == \"LTE\") |>\n  st_intersection(eng)\n\nx <- ggplot() + \n  geom_sf(data = eng, fill = \"black\", color = \"white\", size = 0.3) + \n  geom_sf(data = UMTS, shape = \".\", color = \"#4d88ff\", alpha = 0.3) +\n  geom_sf(data = LTE, shape = \".\", color = \"#cc0000\", alpha = 0.5) +\n  theme_void() +\n  labs(\n    title = \"<span style='color: white; text-align: center;'>Cell tower distribution with <br> <span style='color: #cc0000'>4G<\/span> (LTE) and <span style='color: #4d88ff'>3G<\/span> (UMTS)<\/span>\",\n    caption = \"<span style='color: white;'> Made by Etienne Bacher <b>&middot;<\/b> Original plot by Dominic Royé <b>&middot;<\/b> Data from opencellid.org <\/span>\"\n  ) +\n  theme(\n    plot.background = element_rect(fill = \"black\"),\n    panel.background = element_rect(fill = \"black\"),\n    plot.title = element_markdown(margin = margin(t = 40, b = -60, l = 10), size = 20),\n    plot.caption = element_markdown(hjust = 0, margin = margin(l = 10, b = 20, t = -30)),\n    text = element_text(family = \"Roboto Condensed\")\n  )\n\nggsave(\"my_plot_eng.png\", plot = x, height = 10, width = 9)\n\n\n\n\n\nThanks to this StackOverflow answer for pointing that out.↩︎\n",
    "preview": "posts/2021-12-23-reproduce-some-maps-about-3g-and-4g-access/my_plot_fr.png",
    "last_modified": "2023-02-16T14:16:35+00:00",
    "input_file": {},
    "preview_width": 2100,
    "preview_height": 2100
  },
  {
    "path": "posts/2021-04-11-how-to-create-a-gallery-in-distill/",
    "title": "How to create a gallery in Distill",
    "description": "Use lightgallery.js to create a gallery for your plots or images.",
    "author": [
      {
        "name": "Etienne Bacher",
        "url": {}
      }
    ],
    "date": "2021-05-20",
    "categories": [],
    "contents": "\n\nContents\nCreate a gallery with lightgallery.js\nMake the gallery with R\nCreate thumbnails\nBuild the HTML structure\n\nUpdate GitHub Actions\nBonus: make a gallery for #tidytuesday\nConclusion\n\nThis post shows how to create a gallery on a Distill website. Keep in mind that Distill is (purposely) less flexible than other tools, such as {blogdown}, so the gallery might look quite different from what you expect.\nCreate a gallery with lightgallery.js\nLightgallery.js is a Javascript library that allows you to build a gallery very simply. You will need images in full size and thumbnails, i.e a smaller version of the images (we will see how to automatically make them later in this post).\nFirst of all, let’s construct the gallery with HTML, CSS, and Javascript. We will see how to adapt this in R then. We need to load the Javascript and CSS files for lightgallery.js in the head:\n\n<head>\n\n<link type=\"text/css\" rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/lightgallery/1.6.0/css/lightgallery.min.css\" /> \n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/lightgallery-js/1.4.1-beta.0/js/lightgallery.min.js\"><\/script>\n\n<!-- lightgallery plugins -->\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/lg-fullscreen/1.2.1/lg-fullscreen.min.js\"><\/script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/lg-thumbnail/1.2.1/lg-thumbnail.min.js\"><\/script>\n\n<\/head>\n\nThen, we construct the layout of the gallery. Here, I make the minimum layout, just to make sure this works:\n\n<div id=\"lightgallery\">\n  <a href=\"img1.png\">\n    <img src=\"thumb-img1.png\" />\n  <\/a>\n  <a href=\"img2.png\">\n    <img src=\"thumb-img2.png\" />\n  <\/a>\n<\/div>\n\nAs you can see, the whole gallery is in a <div> element. To add an image to the gallery, we just have to add an <a> element as the two already there.\nThen, we add the Javascript code to run lightgallery.js:\n\n<script type=\"text/javascript\">\n  lightGallery(document.getElementById('lightgallery')); \n<\/script>\n\nThis should work, but I just add a CSS animation to zoom a bit when hovering a thumbnail:\n\n<style>\n  #lightgallery > a > img:hover {\n    transform: scale(1.2, 1.2);\n    transition: 0.2s ease-in-out;\n    cursor: pointer;\n  }\n<\/style>\n\nThat’s it for the proof of concept. Now let’s adapt it in R.\n\nClick to see the full HTML.\n\n<!doctype html>\n<html>\n  <head>\n    <link type=\"text/css\" rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/lightgallery-js/1.4.1-beta.0/css/lightgallery.css\" /> \n    <script src=\"https://cdnjs.cloudflare.com/ajax/libs/lightgallery-js/1.4.1-beta.0/js/lightgallery.min.js\"><\/script>\n\n   <!-- lightgallery plugins -->\n   <script src=\"https://cdnjs.cloudflare.com/ajax/libs/lg-fullscreen/1.2.1/lg-fullscreen.min.js\"><\/script>\n   <script src=\"https://cdnjs.cloudflare.com/ajax/libs/lg-thumbnail/1.2.1/lg-thumbnail.min.js\"><\/script>\n  <\/head>\n  <body>\n    <div id=\"lightgallery\">\n      <a href=\"img1.png\" data-sub-html=\"<h4>Sunset Serenity<\/h4><p>A gorgeous Sunset tonight captured at Coniston Water....<\/p>\">\n          <img src=\"thumb-img1.png\" />\n      <\/a>\n      <a href=\"img2.png\">\n          <img src=\"thumb-img2.png\" />\n      <\/a>\n    <\/div>\n\n    <script type=\"text/javascript\">\n      lightGallery(document.getElementById('lightgallery')); \n    <\/script>\n        \n    <style>\n      #lightgallery > a > img:hover {\n        transform: scale(1.2, 1.2);\n        transition: 0.2s ease-in-out;\n        cursor: pointer;\n      }\n    <\/style>\n  \n  <\/body>\n<\/html>\n\nMake the gallery with R\nCreate thumbnails\nFirst, store your (full-size) images in a folder, let’s say _gallery/img. As we saw above, lightgallery.js also requires thumbnails in addition to full-size images. To automatically create these thumbnails, we can use the function image_resize() in the package magick. First, I create a function to resize a single image, and I will apply it to all the images I have:\n\n\nlibrary(magick)\nlibrary(here)\n\nresize_image <- function(image) {\n  \n  imFile <- image_read(here::here(paste0(\"_gallery/img/\", image)))\n  imFile_resized <- magick::image_resize(imFile, \"6%\")\n  magick::image_write(imFile_resized, here::here(paste0(\"_gallery/img/thumb-\", image)))\n  \n}\n\nlist_png <- list.files(\"_gallery/img\")\nlapply(list_png, resize_image)\n\n\n\nBuild the HTML structure\nWe can now start building the HTML structure with the package htmltools. First, we can see that the HTML code for each image is very similar:\n\n<a href=\"img.png\">\n    <img src=\"thumb-img.png\" />\n<\/a>\n\nThis can be reproduced in R with:\n\n\nlibrary(htmltools)\n\ntags$a(\n  href = \"img.png\",\n  tags$img(src = \"thumb-img.png\")\n)\n\n\n\nWe can now create a function to apply this structure to all the images we have:\n\n\nmake_gallery_layout <- function() {\n  \n  # Get the names of all images\n  images <- list.files(\"_gallery/img\")\n  \n  # Get the names of all full-size images\n  images_full_size <- grep(\"thumb\", images, value = TRUE, invert = TRUE)\n  \n  # Get the names of all thumbnails\n  images_thumb <- grep(\"thumb\", images, value = TRUE)\n  \n  # Create a dataframe where each row is one image (useful for\n  # the apply() function)\n  images <- data.frame(images_thumb = images_thumb,\n                       images_full_size = images_full_size)\n  \n  # Create the HTML structure for each image\n  tagList(apply(images, 1, function(x) {\n      tags$a(\n        href = paste0(\"_gallery/img/\", x[[\"images_full_size\"]]),\n        tags$img(src = paste0(\"_gallery/img/\", x[[\"images_thumb\"]]))\n      )\n  }))\n  \n}\n\n\n\nLastly, we need to embed this HTML code in <div id=\"lightgallery\">, as shown in the first section. We can do that with the following code:\n\n\nwithTags(\n  div(\n    class = \"row\",\n    id = \"lightgallery\",\n    tagList(\n      make_gallery_layout()\n    )\n  )\n)\n\n\n\nWe now have all the HTML code we need. We now have to add the CSS and the JavaScript code. We can just copy-paste it in an R Markdown file.\n\nClick to see the full R Markdown file.\n---\ntitle: \"Gallery\"\noutput:\n  distill::distill_article\n---\n\n```{r echo = FALSE}\nknitr::opts_chunk$set(\n  echo = FALSE\n)\n```\n\n<head>\n\n<link type=\"text/css\" rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/lightgallery/1.6.0/css/lightgallery.min.css\" /> \n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/lightgallery-js/1.4.1-beta.0/js/lightgallery.min.js\"><\/script>\n\n<!-- lightgallery plugins -->\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/lg-fullscreen/1.2.1/lg-fullscreen.min.js\"><\/script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/lg-thumbnail/1.2.1/lg-thumbnail.min.js\"><\/script>\n\n<\/head>\n\n```{css}\n#lightgallery > a > img:hover {\n   transform: scale(1.15, 1.15);\n   transition: 0.4s ease-in-out;\n   cursor: pointer;\n}\n```\n\n```{r include = FALSE}\n# Load the functions we have created\nsource(here::here(\"R/functions.R\"))\n```\n\n```{r}\n# Create layout\nwithTags(\n  div(\n    class = \"row\",\n    id = \"lightgallery\",\n    tagList(\n      make_gallery_layout()\n    )\n  )\n)\n\n```\n\n<script type=\"text/javascript\">\n    lightGallery(document.getElementById('lightgallery')); \n<\/script>\n\nUpdate GitHub Actions\nWe need to add fs::dir_copy(\"_gallery/img\", \"_site/_gallery/img\") in GitHub Actions so that the images are found when the gallery is built. We also have to add magick and httr in the list of packages to install.\nIf you haven’t set up GitHub Actions yet, you can check my previous post, or check my current GitHub Actions for this site.\nBonus: make a gallery for #tidytuesday\nI have started participating to #tidytuesday this year, and the main reason I wanted to create a gallery was to display my favorite plots. Therefore, I created a function to make it as easy as possible for me to update the plots I want to display in the gallery.\nThe purpose of the function below is to download a plot for a specific week in a specific year in the repo containing my plots.\n\n\nlibrary(httr)\n\nget_tt_image <- function(year, week) {\n  \n  if (is.numeric(year)) year <- as.character(year)\n  if (is.numeric(week)) week <- as.character(week)\n  if (nchar(week) == 1) week <- paste0(\"0\", week)\n  \n  ### Get the link to download the image I want\n  req <- GET(\"https://api.github.com/repos/etiennebacher/tidytuesday/git/trees/master?recursive=1\")\n  stop_for_status(req)\n  file_list <- unlist(lapply(content(req)$tree, \"[\", \"path\"), use.names = F)\n  png_list <- grep(\".png\", file_list, value = TRUE, fixed = TRUE)\n  png_wanted <- grep(year, png_list, value = TRUE)\n  png_wanted <- grep(paste0(\"W\", week), png_wanted, value = TRUE)\n  # If a png file is called accidental_art, don't take it\n  if (any(grepl(\"accidental_art\", png_wanted))) {\n    png_wanted <- png_wanted[-which(grepl(\"accidental_art\", png_wanted))]\n  }\n  \n  ### Link of the image I want to download\n  origin <- paste0(\n    \"https://raw.githubusercontent.com/etiennebacher/tidytuesday/master/\",\n    png_wanted \n  )\n  \n  ### Destination of this image\n  destination <- paste0(\"_gallery/img/\", year, \"-\", week, \"-\", trimws(basename(origin)))\n  \n  ### Download only if not already there\n  if (!file.exists(destination)) {\n    if (!file.exists(\"_gallery/img\")) {\n      dir.create(\"_gallery/img\")\n    }\n    download.file(origin, destination)\n  }\n  \n  ### Create the thumbnail if not already there\n  thumb_destination <- paste0(\"_gallery/img/thumb-\", year, \"-\", week, \"-\", \n                        trimws(basename(origin)))\n  if (!file.exists(thumb_destination)) {\n    resize_image(paste0(year, \"-\", week, \"-\", trimws(basename(origin))))\n  }\n \n}\n\n\n\nAs you can see, this function downloads the plot I want, puts it in _gallery/img and creates the thumbnail. All I have to do now is to choose the plots I want to display and to apply the function to these year-week pairs in the R Markdown file.\nNote that for some reason, this function sometimes fails on GitHub Actions because of HTTP error 403. I think this is related to the number of requests to GitHub API but what is strange is that this function isn’t supposed to make a lot of requests, so it is still a mystery.\n\nClick to see the full R Markdown file.\n---\ntitle: \"Gallery\"\noutput:\n  distill::distill_article\n---\n\n```{r echo = FALSE}\nknitr::opts_chunk$set(\n  echo = FALSE\n)\n```\n\n<head>\n\n<link type=\"text/css\" rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/lightgallery/1.6.0/css/lightgallery.min.css\" /> \n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/lightgallery-js/1.4.1-beta.0/js/lightgallery.min.js\"><\/script>\n\n<!-- lightgallery plugins -->\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/lg-fullscreen/1.2.1/lg-fullscreen.min.js\"><\/script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/lg-thumbnail/1.2.1/lg-thumbnail.min.js\"><\/script>\n\n<\/head>\n\n```{css}\n#lightgallery > a > img:hover {\n   transform: scale(1.15, 1.15);\n   transition: 0.4s ease-in-out;\n   cursor: pointer;\n}\n```\n\n```{r include = FALSE}\n# Load the functions we have created\nsource(here::here(\"R/functions.R\"))\n\n# Make list of tidytuesday plots I want to show in the gallery\ntt_plots <- rbind(\n  c(2021, 8),\n  c(2021, 12),\n  c(2021, 13),\n  c(2021, 15),\n  c(2021, 16)\n)\n\n# Download the plots and create the thumbnails\napply(tt_plots, 1, function(x) get_tt_image(x[1], x[2]))\n```\n\n```{r}\n# Create layout\nwithTags(\n  div(\n    class = \"row\",\n    id = \"lightgallery\",\n    tagList(\n      make_gallery_layout()\n    )\n  )\n)\n\n```\n\n<script type=\"text/javascript\">\n    lightGallery(document.getElementById('lightgallery')); \n<\/script>\n\nConclusion\nIn this post, I tried to explain how to build a gallery with a simple example. However, you can also check the repo of my website to have a clearer view of how to do so. I also added some CSS styling that is not described here, to limit the code to what is really necessary.\nCheck the gallery to see the result.\n\n\n\n",
    "preview": "posts/2021-04-11-how-to-create-a-gallery-in-distill/gallery_image.jpg",
    "last_modified": "2023-02-16T14:16:35+00:00",
    "input_file": {}
  },
  {
    "path": "posts/2021-03-19-use-github-actions-with-r-markdown-and-distill/",
    "title": "Use GitHub actions with R Markdown and Distill",
    "description": "How can you automatically render README, Distill website...",
    "author": [
      {
        "name": "Etienne Bacher",
        "url": {}
      }
    ],
    "date": "2021-03-19",
    "categories": [],
    "contents": "\n\nContents\nRender a README\nRender a Distill website\n\n The preview image comes from: https://github.com/marketplace/actions/cancel-workflow-action \nSometimes, it is useful to automatically render an R Markdown document or a website, made with distill for example. In this post, I will present you two cases in which I use GitHub Actions to automatically do that.\nRender a README\nOne of my GitHub repos is a list of JavaScript libraries that have been adapted in R. You can find the repo here. I wanted this list to be easy to update, so that it can be done on GitHub directly. The idea is that when I (or someone else) find a JavaScript library that has been adapted into an R package, I add it to a CSV file on GitHub. The problem is that this CSV file is then used into an R Markdown file, that creates a clean README with all the information.\nWithout GitHub Actions, in addition to modify the CSV file, I would have to clone the repo, open it in RStudio, render the README, and push it back on GitHub.\nBut this task is repetitive: apart from the details I add to the CSV file, it can be automated. This is where GitHub Actions comes into play. The idea is that you create a .yml file that contains the R code you want to run to render the README. This is what mine looks like:\n\non:\n  push:\n    branches: master\n\nname: Render README\n\njobs:\n  render:\n    name: Render README\n    runs-on: macOS-latest\n    steps:\n      - uses: actions/checkout@v2\n      - uses: r-lib/actions/setup-r@v1\n      - uses: r-lib/actions/setup-pandoc@v1\n      - name: Install rmarkdown\n        run: Rscript -e 'install.packages(\"rmarkdown\")'\n      - name: Render README\n        run: Rscript -e 'rmarkdown::render(\"README.Rmd\", output_format = \"md_document\")'\n      - name: Commit results\n        run: |\n          git commit README.md -m 'Re-build README.Rmd' || echo \"No changes to commit\"\n          git push origin || echo \"No changes to commit\"\n\nThe first two parts are quite self-explanatory:\nthe jobs run every time there’s a push on the master branch;\nthe name of this process is “Render README”.\nThe third part needs a bit more details. There are some parts that I just copied and pasted from the R actions repository, but basically you can see that first it initiates R and pandoc (setup-r@v1, setup-pandoc@v1). Then, I run an R script to install the rmarkdown package and I use it to render the Rmd file to create README.md.\nLast but not least, GitHub Actions rendered the README, but the changes are not on the repo yet. Hence, the last step is to commit the changes with a message and to push them on the master branch. Now, every time I change the CSV file on the master branch, the README will be automatically rendered (after a few minutes, since all the actions have to run first).\nI said this was the .yaml file I use on my repo, but I lied a bit. Actually, for my list of JavaScript libraries to be up-to-date, I also need to scrape the htmlwidgets gallery once in a while. Hence, I use cron to run GitHub Actions every Monday at 00:00. See the documentation to know how to format your schedule. Finally, here’s the .yaml file I use:\n\non:\n  push:\n    branches: master\n  schedule:\n    - cron: '0 0 * * MON'\n\nname: Render README\n\njobs:\n  render:\n    name: Render README\n    runs-on: macOS-latest\n    steps:\n      - uses: actions/checkout@v2\n      - uses: r-lib/actions/setup-r@v1\n      - uses: r-lib/actions/setup-pandoc@v1\n      - name: Install rmarkdown\n        run: Rscript -e 'install.packages(\"rmarkdown\")'\n      - name: Render README\n        run: Rscript -e 'rmarkdown::render(\"README.Rmd\", output_format = \"md_document\")'\n      - name: Commit results\n        run: |\n          git commit README.md -m 'Re-build README.Rmd' || echo \"No changes to commit\"\n          git push origin || echo \"No changes to commit\"\n\nRender a Distill website\nTo automatically render your distill website on every push on master branch, the logic is very similar. In my .yml file, there are two main differences.\nThe first one is that I need to install more packages to render my distill website. Some will be essential for everyone (e.g distill) but other packages won’t be (e.g postcards).\nThe second one is more tricky, but could be useful for several people. Before using distill, I used blogdown. For some reasons (and mostly because distill is much easier in my opinion), I switched to distill. However, this switch changed a few URLs addresses, for my posts for instance. Therefore, I needed a _redirects file to, well, redirect the old URLs to the new ones and prevent 404 errors. The _redirects file needs to be in the _site folder, because it is the folder that is used by Netlify to build the site. The problem here is that this folder is deleted and re-generated every time rmarkdown::render_site() is called, i.e every time the website is locally built. Therefore, the _redirects file couldn’t just stay there. I had to add it manually after every build.\nThe solution to that is to automate this in GitHub Actions. After having rendered the website, I just copy _redirects from its location on the repo to the _site folder. Now, every time I change something on the master branch, the distill website is rebuilt, and then the _redirects file is added.\nOne drawback though: since these files are changed on GitHub only, the first thing you have to do when opening your site project in RStudio is to pull the changes (or, like me, you will struggle with merge conflicts).\nTo finish this post, here’s the .yml file for my distill website:\n\non:\n  push:\n    branches: master\n\nname: Render & Deploy Site\n\njobs:\n  build:\n    runs-on: macOS-latest\n    steps:\n      - uses: actions/checkout@v2\n\n      - uses: r-lib/actions/setup-r@master\n\n      - uses: r-lib/actions/setup-pandoc@master\n\n      - name: Install dependencies\n        run: |\n          install.packages(\"rmarkdown\")\n          install.packages(\"distill\")\n          install.packages(\"postcards\")\n          install.packages(\"devtools\")\n          install.packages(\"fs\")\n          devtools::install_github(\"etiennebacher/ebmisc\")\n        shell: Rscript {0}\n\n      - name: Render Site\n        run: Rscript -e 'rmarkdown::render_site(encoding = \"UTF-8\")'\n      - name: Copy redirects\n        run: Rscript -e 'fs::file_copy(\"_redirects\", \"_site/_redirects\")'\n      - name: Commit results\n        run: |\n          git add -A\n          git commit -m 'Rebuild site' || echo \"No changes to commit\"\n          git push origin || echo \"No changes to commit\"\n\n\n\n\n",
    "preview": "posts/2021-03-19-use-github-actions-with-r-markdown-and-distill/gha_image.jpg",
    "last_modified": "2023-02-16T14:16:35+00:00",
    "input_file": {}
  },
  {
    "path": "posts/2020-12-03-code-two-columns-blogdown/",
    "title": "Compare two languages in R Markdown documents",
    "description": "A few months ago, I tried to compare two languages in an article. Here are several ways to do it.",
    "author": [
      {
        "name": "Etienne Bacher",
        "url": {}
      }
    ],
    "date": "2020-12-03",
    "categories": [],
    "contents": "\n\nContents\nTwo code chunks side-by-side\nCreate tabs with {xaringanExtra}\nUse <details>\n\nIn one of my first posts, I wanted to compare two languages (namely and R and Stata) by putting two chunks side-by-side. I asked how to do this on StackOverflow and continued to dig this question occasionally. I have now a few more or less convincing solutions/alternatives, that I summarize here.\nTwo code chunks side-by-side\nIt is possible to produce two columns in an HTML document (this is also possible for LaTeX files but the code is different). The following code…\n:::: {style=\"display: grid; grid-template-columns: 70% 70%; grid-column-gap: 30px;\"}\n\n::: {}\n```{r}\nhead(mtcars)\n```\n:::\n\n::: {}\n```{r}\nhead(anscombe)\n```\n:::\n\n::::\n… produces this output:\n\n\n\n\nhead(mtcars)\n\n\n                   mpg cyl disp  hp drat    wt  qsec vs am gear carb\nMazda RX4         21.0   6  160 110 3.90 2.620 16.46  0  1    4    4\nMazda RX4 Wag     21.0   6  160 110 3.90 2.875 17.02  0  1    4    4\nDatsun 710        22.8   4  108  93 3.85 2.320 18.61  1  1    4    1\nHornet 4 Drive    21.4   6  258 110 3.08 3.215 19.44  1  0    3    1\nHornet Sportabout 18.7   8  360 175 3.15 3.440 17.02  0  0    3    2\nValiant           18.1   6  225 105 2.76 3.460 20.22  1  0    3    1\n\n\n\n\n\nhead(anscombe)\n\n\n  x1 x2 x3 x4   y1   y2    y3   y4\n1 10 10 10  8 8.04 9.14  7.46 6.58\n2  8  8  8  8 6.95 8.14  6.77 5.76\n3 13 13 13  8 7.58 8.74 12.74 7.71\n4  9  9  9  8 8.81 8.77  7.11 8.84\n5 11 11 11  8 8.33 9.26  7.81 8.47\n6 14 14 14  8 9.96 8.10  8.84 7.04\n\n\n\nAll of this is more detailed in this section of the R Markdown Cookbook.\nCreate tabs with {xaringanExtra}\nAn alternative to side-by-side chunks is to create tabs. We lose the ability to compare directly two chunks, but we can put much more tabs than code chunks. To do so, we use {xaringanExtra}, made by Garrick Aden-Buie. It is a great package that adds a lot of functionalities to R Markdown or {xaringan}.\nTo create tabs, we run xaringanExtra::use_panelset() first, and then we create the sections. Let’s init the panelset:\n\n\nlibrary(xaringanExtra)\n# enable panelset\nuse_panelset()\n\n\n\nNext, we can create several panels with ::::: {.panelset} and ::: {.panel}. Here’s an example:\n::::: {.panelset}\n\n::: {.panel}\n[mtcars]{.panel-name}\n```{r}\nhead(mtcars)\n```\n:::\n\n::: {.panel}\n[anscombe]{.panel-name}\n```{r}\nhead(anscombe)\n```\n:::\n\n::::\n\n\nmtcars\n\n\nhead(mtcars)\n\n\n                   mpg cyl disp  hp drat    wt  qsec vs am gear carb\nMazda RX4         21.0   6  160 110 3.90 2.620 16.46  0  1    4    4\nMazda RX4 Wag     21.0   6  160 110 3.90 2.875 17.02  0  1    4    4\nDatsun 710        22.8   4  108  93 3.85 2.320 18.61  1  1    4    1\nHornet 4 Drive    21.4   6  258 110 3.08 3.215 19.44  1  0    3    1\nHornet Sportabout 18.7   8  360 175 3.15 3.440 17.02  0  0    3    2\nValiant           18.1   6  225 105 2.76 3.460 20.22  1  0    3    1\n\n\n\nanscombe\n\n\nhead(anscombe)\n\n\n  x1 x2 x3 x4   y1   y2    y3   y4\n1 10 10 10  8 8.04 9.14  7.46 6.58\n2  8  8  8  8 6.95 8.14  6.77 5.76\n3 13 13 13  8 7.58 8.74 12.74 7.71\n4  9  9  9  8 8.81 8.77  7.11 8.84\n5 11 11 11  8 8.33 9.26  7.81 8.47\n6 14 14 14  8 9.96 8.10  8.84 7.04\n\n\n\nUse <details>\nFinally, it is also possible to create chunks that are hidden by default but can be expanded by the user. This is particularly useful if you want to provide the user a reference. For instance, if you’re trying to teach a new language, it might be helpful to provide code that the user already knows, without displaying it by default.\nHere’s an example. We create the “expanding zone” below with:\n<details>\n<summary> Stata <\/summary>\nHere, I put some Stata code hidden so that the user can compare if necessary:\n```stata \nregress y x\n```\n<\/details>\n\n\n# Here I'm teaching R\nlm(mpg ~ drat, data = mtcars)\n\n\n\n\nStata\nHere, I put some Stata code hidden so that the user can compare if necessary:\nregress y x\n\nThat’s all! To summarize:\ncode chunks side-by-side\ntabs\nhidden chunks with <details>\n\n\n\n",
    "preview": {},
    "last_modified": "2023-02-16T14:16:35+00:00",
    "input_file": {}
  },
  {
    "path": "posts/2020-10-18-nobel-laureates/",
    "title": "Visualize data on Nobel laureates per country",
    "description": "A post where I make animated graphs and maps to visualize the repartition of Nobel laureates per country.",
    "author": [
      {
        "name": "Etienne Bacher",
        "url": {}
      }
    ],
    "date": "2020-10-18",
    "categories": [],
    "contents": "\n\nContents\nImport and clean data\nPlot the data\nStatic plot\nAnimated plots\n\nMaps\nStatic maps\nInteractive maps\n\n\nThe Nobel laureates of 2020 were announced last week, and I thought it would be interesting to visualize the repartition of laureates per country, as there are several ways to do so. I’m going to use this dataset available on Kaggle, which contains information on the year, category, name of the laureate, country, city and date of birth and death, among other things. Notice that this dataset goes from 1901 to 2016 and therefore doesn’t contain the most recent laureates.\nBut first of all, we need to load all the packages we will use in this analysis:\n\n\nlibrary(tidyverse)\nlibrary(janitor)\nlibrary(ggthemes)\nlibrary(gganimate)\nlibrary(here)\nlibrary(tmap)\nlibrary(countrycode)\nlibrary(echarts4r)\n\n\n\nImport and clean data\nNow, we can import the dataset. To remove the capital letters and transform the column names in snake case (i.e names such as “column_name” instead of “Column Name”), we can use the function clean_names() of the package {janitor} 1:\n\n\nnobel_laureates_raw <- read_csv(here(\"_posts/2020-10-18-nobel-laureates/nobel-laureates.csv\")) %>%\n  janitor::clean_names()\n\n\n\nThe first thing that we have to correct before doing visualization concerns the country names. Indeed, many countries have changed since 1901. For example, Czechoslovakia no longer exists, as well as Prussia. In this dataset, the columns containing country names display first the official name at the time, and then put the current name of the country between brackets.\n\n# A tibble: 6 x 2\n  birth_country     death_country\n  <chr>             <chr>        \n1 Netherlands       Germany      \n2 France            France       \n3 Prussia (Poland)  Germany      \n4 Switzerland       Switzerland  \n5 France            France       \n6 Prussia (Germany) Germany      \n\nSince we only want the current country names, we must modify these columns so that:\nif the name doesn’t have brackets (i.e the country hasn’t changed in time), we let it as-is;\nif the name has brackets (i.e the country has changed), we only want to keep the name between brackets.\nSince I must do this for two columns (birth_country and death_country), I created a function (and this was the perfect example of losing way too much time by making a function to save time…):\n\n\nclean_country_names <- function(data, variable) {\n  data <- data %>%\n    mutate(\n      x = gsub(\n        \"(?<=\\\\()[^()]*(?=\\\\))(*SKIP)(*F)|.\",\n        \"\",\n        {{variable}},\n        perl = T\n      ),\n      x = ifelse(x == \"\", {{variable}}, x)\n    ) %>%\n    select(- {{variable}}) %>%\n    rename({{variable}} := \"x\")\n}\n\n\n\nThis function takes a dataset (data), and creates a new column (x) that will take the name between brackets if original variable has brackets, or the unique name if the original variable doesn’t have brackets. Then, x is renamed as the variable we specified first. I must admit that regular expressions (such as the one in gsub()) continue to be a big mystery for me, and I thank StackOverflow for providing many examples.\nNow, we apply this function to our columns with countries:\n\n\nnobel_laureates <- clean_country_names(nobel_laureates_raw, birth_country)\nnobel_laureates <- clean_country_names(nobel_laureates, death_country)\n\n\n\nThe country names are now cleaned:\n\n# A tibble: 6 x 2\n  birth_country death_country\n  <chr>         <chr>        \n1 Netherlands   Germany      \n2 France        France       \n3 Poland        Germany      \n4 Switzerland   Switzerland  \n5 France        France       \n6 Germany       Germany      \n\nFrom now on, there are several ways to visualize the repartition of Nobel laureates per country. We could do a static bar plot, an animated bar plot to see the evolution in time, a static map, or an interactive map.\nPlot the data\nStatic plot\nFirst of all, we need to compute the number of Nobel laureates per country:\n\n\nnobel_per_country <- nobel_laureates %>%\n  select(birth_country, full_name) %>%\n  distinct() %>%\n  group_by(birth_country) %>%\n  count(sort = TRUE) %>%\n  ungroup() %>%\n  drop_na()\n\n\n\nThen we can plot this number, only for the first 20 countries (so that the plot can be readable):\n\n\nnobel_per_country %>%\n  select(birth_country, n) %>%\n  top_n(20) %>%\n  mutate(birth_country = reorder(birth_country, n)) %>%\n  ggplot(aes(x = birth_country, y = n)) +\n  geom_col() +\n  coord_flip() +\n  xlab(\"Country\") +\n  ylab(\"\") +\n  geom_text(aes(label = n), nudge_y = 10) +\n  ggthemes::theme_clean()\n\n\n\n\nWe can also check the repartition per country and per category:\n\n\n# The 20 countries with the most nobels\ntop_20 <- nobel_per_country %>%\n  top_n(10) %>%\n  select(birth_country) %>%\n  unlist(use.names = FALSE)\n\nnobel_laureates %>%\n  select(birth_country, full_name, category) %>%\n  distinct() %>%\n  group_by(birth_country, category) %>%\n  mutate(n = n()) %>%\n  ungroup() %>%\n  drop_na() %>%\n  select(- full_name) %>%\n  distinct() %>%\n  filter(birth_country %in% top_20) %>%\n  ggplot(aes(x = birth_country, y = n)) +\n  geom_col() +\n  coord_flip() +\n  xlab(\"Country\") +\n  ylab(\"\") +\n  geom_text(aes(label = n), nudge_y = 10) +\n  ggthemes::theme_clean() +\n  facet_wrap(~category)\n\n\n\n\nAnimated plots\nTo observe the evolution of this number in time, one way would be to plot lines with year in x-axis. But we could also keep the first plot we made and animate it with {gganimate}.\nFirst, we compute the cumulated sum of Nobel laureates. Indeed, the number of laureates per year is useless for us, we want to see the evolution of the total number:\n\n\nnobel_per_country_year <- nobel_laureates %>%\n  select(year, birth_country) %>%\n  group_by(year, birth_country) %>%\n  count(sort = TRUE) %>%\n  ungroup() %>%\n  drop_na() %>%\n  arrange(birth_country, year) %>%\n  complete(year, birth_country) %>%\n  mutate(n = ifelse(is.na(n), 0, n),\n         year = as.integer(year)) %>%\n  filter(birth_country %in% top_20) %>%\n  group_by(birth_country) %>%\n  mutate(n_cumul = cumsum(n)) %>%\n  arrange(birth_country)\n\n\n\nThen, we use almost the same code as for the first plot, but we add arguments at the end that tell how we want the animation to be:\n\n\nplot_evol <- nobel_per_country_year %>%\n  select(birth_country, year, n_cumul) %>%\n  filter((year %% 2) != 0) %>%\n  ggplot(aes(x = reorder(birth_country, n_cumul), y = n_cumul)) +\n  geom_col() +\n  coord_flip() +\n  xlab(\"Country\") +\n  ylab(\"\") +\n  geom_text(aes(label = as.character(round(n_cumul, 0))), nudge_y = 10) +\n  ggthemes::theme_clean() +\n  transition_time(year) +\n  ggtitle(\"Year: {frame_time}\") +\n  ease_aes('linear', interval = 2)\n\nanimate(plot_evol, duration = 15, fps = 20)\n\n\n\n\nThis allows us to see that the USA have seen their number of Nobel laureates surge from the 1960’s and 1970’s, which corresponds more or less to the creation of the so-called “Nobel Prize in Economics” in 1969. The plot per category also indicates that this prize plays a major role in the domination of the USA.\nMaps\nStatic maps\nTo create maps, we rely on the package {tmap}. In addition to its functions, this package also gives access to a dataset that we will use to show the number of laureates per country.\n\n\ndata(World)\n\n\n\nWe need to merge our dataset of Nobel laureates with this dataset. But the country names differ. Therefore, we have to use ISO codes instead. World already contains ISO codes, so we only have to create those for our dataset. This can be done very easily with the package {countrycode}. However, some countries in our dataset don’t have ISO codes, such as Scotland, Northern Ireland or Czechoslovakia. The two former can be recoded as United Kingdom, but Czechoslovakia was located on current Slovakia, Czech Republic and Ukraine, so we drop it of our dataset.\n\n\nnobel_per_country <- nobel_per_country %>%\n  mutate(\n    iso_birth = countrycode(birth_country, origin = \"country.name\", destination = \"iso3c\"),\n    iso_birth = case_when(\n      birth_country == \"Scotland\" | birth_country == \"Northern Ireland\" ~ \"GBR\",\n      TRUE ~ iso_birth\n    )\n  )\n\n\n\nWe can now merge the two datasets based on their ISO codes…\n\n\nWorld <- World %>%\n  full_join(nobel_per_country, by = c(\"iso_a3\" = \"iso_birth\")) %>%\n  rename(\"number\" = \"n\") %>%\n  mutate(number = ifelse(is.na(number), 0, number))\n\n\n\n… and we can build the map and fill the countries with the number of laureates:\n\n\ntm_shape(World, projection = 4326) +\n  tm_fill(\"number\", breaks = c(0, 5, 10, 50, 200, Inf), palette = \"YlOrBr\") +\n  tm_polygons() +\n  tm_legend(title = \"Nobel prizes per country\", legend.title.size = 10^(-4)) +\n  tm_layout(legend.outside = TRUE)\n\n\n\n\nInteractive maps\nFinally, we will make interactive maps with {echarts4r}. Firstly, let’s make an identical map as the one above but with a few interactive features.\n{echarts4r} uses specific country names, so we use once again {countrycode} to modify the names in our dataset.\n\n\nnobel_per_country_echarts <- e_country_names(data = nobel_per_country,\n                                             input = iso_birth,\n                                             type = \"iso3c\")\n\n\n\nNow we can plot the map:\n\n\nnobel_per_country_echarts %>%\n  e_charts(iso_birth) %>%\n  e_map(n, roam = TRUE) %>%\n  e_visual_map(max = max(nobel_per_country_echarts$n))\n\n\n\n\nHovering the countries gives us their name, and the number of laureates in the legend. We can also zoom in and out. We could see the evolution of laureates in time with timeline = TRUE:\n\n\nnobel_per_country_year_map <- nobel_laureates %>%\n  select(year, birth_country) %>%\n  group_by(year, birth_country) %>%\n  count(sort = TRUE) %>%\n  ungroup() %>%\n  drop_na() %>%\n  arrange(birth_country, year) %>%\n  complete(year, birth_country) %>%\n  mutate(n = ifelse(is.na(n), 0, n),\n         year = as.integer(year)) %>%\n  group_by(birth_country) %>%\n  mutate(n_cumul = cumsum(n)) %>%\n  arrange(birth_country)\n\nnobel_per_country_year_map <- nobel_per_country_year_map %>%\n  mutate(\n    iso_birth = countrycode(birth_country, origin = \"country.name\", destination = \"iso3c\"),\n    iso_birth = case_when(\n      birth_country == \"Scotland\" | birth_country == \"Northern Ireland\" ~ \"GBR\",\n      TRUE ~ iso_birth\n    )\n  )\n\nnobel_per_country_year_echarts <- e_country_names(data = nobel_per_country_year_map,\n                                                  input = iso_birth,\n                                                  type = \"iso3c\")\n\nnobel_per_country_year_echarts %>%\n  group_by(year) %>%\n  e_charts(iso_birth, timeline = TRUE) %>%\n  e_map(n_cumul, roam = TRUE) %>%\n  e_visual_map(max = 257) %>%\n  e_timeline_opts(\n    playInterval = 250,\n    symbol = \"none\"\n  )\n\n\n\n\n\nAnd that’s it! I used data about Nobel laureates to present a few plots and maps made with {ggplot2}, {gganimate}, {tmap}, and {echarts4r}. I used these packages but there are countless ways to make plots or maps, whether static or interactive, with R:\nplots: base R, {highcharter}, {charter}, {plotly}, etc.\nmaps: base R, {leaflet}, {sf}, {ggmap}, etc.\nI hope you enjoyed it!\n\nSession Info\nThis is my session info, so that you can see the versions of packages used. This is useful if the results in my post are no longer reproducible because packages changed. The packages with a star (*) are those explicitely called in the script.\n\n─ Session info ─────────────────────────────────────────────────────\n setting  value                       \n version  R version 4.0.3 (2020-10-10)\n os       Ubuntu 18.04.5 LTS          \n system   x86_64, linux-gnu           \n ui       X11                         \n language en                          \n collate  fr_FR.UTF-8                 \n ctype    fr_FR.UTF-8                 \n tz       Europe/Paris                \n date     2021-01-20                  \n\n─ Packages ─────────────────────────────────────────────────────────\n package      * version  date       lib\n abind          1.4-5    2016-07-21 [1]\n assertthat     0.2.1    2019-03-21 [1]\n backports      1.2.1    2020-12-09 [1]\n base64enc      0.1-3    2015-07-28 [1]\n broom          0.7.3    2020-12-16 [1]\n cellranger     1.1.0    2016-07-27 [1]\n class          7.3-17   2020-04-26 [4]\n classInt       0.4-3    2020-04-07 [1]\n cli            2.2.0    2020-11-20 [1]\n codetools      0.2-16   2018-12-24 [4]\n colorspace     2.0-0    2020-11-11 [1]\n countrycode  * 1.2.0    2020-05-22 [1]\n crayon         1.3.4    2017-09-16 [1]\n crosstalk      1.1.1    2021-01-12 [1]\n DBI            1.1.1    2021-01-15 [1]\n dbplyr         2.0.0    2020-11-03 [1]\n dichromat      2.0-0    2013-01-24 [1]\n digest         0.6.27   2020-10-24 [1]\n distill        1.2      2021-01-13 [1]\n downlit        0.2.1    2020-11-04 [1]\n dplyr        * 1.0.3    2021-01-15 [1]\n e1071          1.7-4    2020-10-14 [1]\n echarts4r    * 0.3.4    2020-10-29 [1]\n ellipsis       0.3.1    2020-05-15 [1]\n evaluate       0.14     2019-05-28 [1]\n fansi          0.4.2    2021-01-15 [1]\n farver         2.0.3    2020-01-16 [1]\n fastmap        1.0.1    2019-10-08 [1]\n forcats      * 0.5.0    2020-03-01 [1]\n fs             1.5.0    2020-07-31 [1]\n generics       0.1.0    2020-10-31 [1]\n gganimate    * 1.0.7    2020-10-15 [1]\n ggplot2      * 3.3.3    2020-12-30 [1]\n ggthemes     * 4.2.0    2019-05-13 [1]\n gifski         0.8.6    2018-09-28 [1]\n glue           1.4.2    2020-08-27 [1]\n gtable         0.3.0    2019-03-25 [1]\n haven          2.3.1    2020-06-01 [1]\n here         * 1.0.1    2020-12-13 [1]\n hms            1.0.0    2021-01-13 [1]\n htmltools      0.5.1    2021-01-12 [1]\n htmlwidgets    1.5.3    2020-12-10 [1]\n httpuv         1.5.5    2021-01-13 [1]\n httr           1.4.2    2020-07-20 [1]\n janitor      * 2.1.0    2021-01-05 [1]\n jsonlite       1.7.2    2020-12-09 [1]\n KernSmooth     2.23-17  2020-04-26 [4]\n knitr          1.30     2020-09-22 [1]\n labeling       0.4.2    2020-10-20 [1]\n later          1.1.0.1  2020-06-05 [1]\n lattice        0.20-41  2020-04-02 [4]\n leafem         0.1.3    2020-07-26 [1]\n leaflet        2.0.4.1  2021-01-07 [1]\n leafsync       0.1.0    2019-03-05 [1]\n lifecycle      0.2.0    2020-03-06 [1]\n lubridate      1.7.9.2  2020-11-13 [1]\n lwgeom         0.2-5    2020-06-12 [1]\n magrittr       2.0.1    2020-11-17 [1]\n mime           0.9      2020-02-04 [1]\n modelr         0.1.8    2020-05-19 [1]\n munsell        0.5.0    2018-06-12 [1]\n pillar         1.4.7    2020-11-20 [1]\n pkgconfig      2.0.3    2019-09-22 [1]\n png            0.1-7    2013-12-03 [1]\n prettyunits    1.1.1    2020-01-24 [1]\n progress       1.2.2    2019-05-16 [1]\n promises       1.1.1    2020-06-09 [1]\n purrr        * 0.3.4    2020-04-17 [1]\n R6             2.5.0    2020-10-28 [1]\n raster         3.4-5    2020-11-14 [1]\n RColorBrewer   1.1-2    2014-12-07 [1]\n Rcpp           1.0.6    2021-01-15 [1]\n readr        * 1.4.0    2020-10-05 [1]\n readxl         1.3.1    2019-03-13 [1]\n reprex         0.3.0    2019-05-16 [1]\n rlang          0.4.10   2020-12-30 [1]\n rmarkdown      2.6.4    2021-01-19 [1]\n rprojroot      2.0.2    2020-11-15 [1]\n rstudioapi     0.13     2020-11-12 [1]\n rvest          0.3.6    2020-07-25 [1]\n scales         1.1.1    2020-05-11 [1]\n sessioninfo    1.1.1    2018-11-05 [1]\n sf           * 0.9-6    2020-09-13 [1]\n shiny          1.5.0    2020-06-23 [1]\n snakecase      0.11.0   2019-05-25 [1]\n sp             1.4-5    2021-01-10 [1]\n stars          0.4-3    2020-07-08 [1]\n stringi        1.5.3    2020-09-09 [1]\n stringr      * 1.4.0    2019-02-10 [1]\n tibble       * 3.0.5    2021-01-15 [1]\n tidyr        * 1.1.2    2020-08-27 [1]\n tidyselect     1.1.0    2020-05-11 [1]\n tidyverse    * 1.3.0    2019-11-21 [1]\n tmap         * 3.2      2020-09-15 [1]\n tmaptools      3.1      2020-07-01 [1]\n tweenr         1.0.1    2018-12-14 [1]\n units          0.6-7    2020-06-13 [1]\n utf8           1.1.4    2018-05-24 [1]\n vctrs          0.3.6    2020-12-17 [1]\n viridisLite    0.3.0    2018-02-01 [1]\n withr          2.4.0    2021-01-16 [1]\n xfun           0.20     2021-01-06 [1]\n XML            3.99-0.5 2020-07-23 [1]\n xml2           1.3.2    2020-04-23 [1]\n xtable         1.8-4    2019-04-21 [1]\n yaml           2.2.1    2020-02-01 [1]\n source                              \n CRAN (R 4.0.0)                      \n CRAN (R 4.0.0)                      \n CRAN (R 4.0.3)                      \n CRAN (R 4.0.0)                      \n CRAN (R 4.0.3)                      \n CRAN (R 4.0.0)                      \n CRAN (R 4.0.0)                      \n CRAN (R 4.0.0)                      \n CRAN (R 4.0.3)                      \n CRAN (R 4.0.0)                      \n CRAN (R 4.0.3)                      \n CRAN (R 4.0.0)                      \n CRAN (R 4.0.0)                      \n CRAN (R 4.0.3)                      \n CRAN (R 4.0.3)                      \n CRAN (R 4.0.3)                      \n CRAN (R 4.0.0)                      \n CRAN (R 4.0.3)                      \n CRAN (R 4.0.3)                      \n CRAN (R 4.0.3)                      \n CRAN (R 4.0.3)                      \n CRAN (R 4.0.3)                      \n Github (JohnCoene/echarts4r@082e62c)\n CRAN (R 4.0.0)                      \n CRAN (R 4.0.0)                      \n CRAN (R 4.0.3)                      \n CRAN (R 4.0.0)                      \n CRAN (R 4.0.0)                      \n CRAN (R 4.0.0)                      \n CRAN (R 4.0.2)                      \n CRAN (R 4.0.3)                      \n CRAN (R 4.0.3)                      \n CRAN (R 4.0.3)                      \n CRAN (R 4.0.2)                      \n CRAN (R 4.0.3)                      \n CRAN (R 4.0.2)                      \n CRAN (R 4.0.0)                      \n CRAN (R 4.0.0)                      \n CRAN (R 4.0.3)                      \n CRAN (R 4.0.3)                      \n CRAN (R 4.0.3)                      \n CRAN (R 4.0.3)                      \n CRAN (R 4.0.3)                      \n CRAN (R 4.0.2)                      \n CRAN (R 4.0.3)                      \n CRAN (R 4.0.3)                      \n CRAN (R 4.0.0)                      \n CRAN (R 4.0.3)                      \n CRAN (R 4.0.3)                      \n CRAN (R 4.0.1)                      \n CRAN (R 4.0.0)                      \n CRAN (R 4.0.2)                      \n CRAN (R 4.0.3)                      \n CRAN (R 4.0.0)                      \n CRAN (R 4.0.0)                      \n CRAN (R 4.0.3)                      \n CRAN (R 4.0.1)                      \n CRAN (R 4.0.3)                      \n CRAN (R 4.0.0)                      \n CRAN (R 4.0.0)                      \n CRAN (R 4.0.0)                      \n CRAN (R 4.0.3)                      \n CRAN (R 4.0.0)                      \n CRAN (R 4.0.0)                      \n CRAN (R 4.0.0)                      \n CRAN (R 4.0.0)                      \n CRAN (R 4.0.3)                      \n CRAN (R 4.0.0)                      \n CRAN (R 4.0.3)                      \n CRAN (R 4.0.3)                      \n CRAN (R 4.0.0)                      \n CRAN (R 4.0.3)                      \n CRAN (R 4.0.3)                      \n CRAN (R 4.0.0)                      \n CRAN (R 4.0.0)                      \n CRAN (R 4.0.3)                      \n Github (rstudio/rmarkdown@2e8572e)  \n CRAN (R 4.0.3)                      \n CRAN (R 4.0.3)                      \n CRAN (R 4.0.2)                      \n CRAN (R 4.0.0)                      \n CRAN (R 4.0.0)                      \n CRAN (R 4.0.3)                      \n CRAN (R 4.0.2)                      \n CRAN (R 4.0.3)                      \n CRAN (R 4.0.3)                      \n CRAN (R 4.0.2)                      \n CRAN (R 4.0.2)                      \n CRAN (R 4.0.0)                      \n CRAN (R 4.0.3)                      \n CRAN (R 4.0.2)                      \n CRAN (R 4.0.0)                      \n CRAN (R 4.0.2)                      \n CRAN (R 4.0.3)                      \n CRAN (R 4.0.2)                      \n CRAN (R 4.0.0)                      \n CRAN (R 4.0.1)                      \n CRAN (R 4.0.0)                      \n CRAN (R 4.0.3)                      \n CRAN (R 4.0.0)                      \n CRAN (R 4.0.3)                      \n CRAN (R 4.0.3)                      \n CRAN (R 4.0.2)                      \n CRAN (R 4.0.3)                      \n CRAN (R 4.0.0)                      \n CRAN (R 4.0.0)                      \n\n[1] /home/etienne/R/x86_64-pc-linux-gnu-library/4.0\n[2] /usr/local/lib/R/site-library\n[3] /usr/lib/R/site-library\n[4] /usr/lib/R/library\n\n\nThis function is very useful even when column names are much more messy.↩︎\n",
    "preview": "posts/2020-10-18-nobel-laureates/distill-preview.png",
    "last_modified": "2023-02-16T14:16:35+00:00",
    "input_file": {},
    "preview_width": 1248,
    "preview_height": 768
  },
  {
    "path": "posts/2020-10-04-the-americans/",
    "title": "Text analysis of the dialogues in \"The Americans\"",
    "description": "I love the TV show \"The Americans\" and decided to harvest and analyze the dialogues.",
    "author": [
      {
        "name": "Etienne Bacher",
        "url": {}
      }
    ],
    "date": "2020-10-04",
    "categories": [],
    "contents": "\n\nContents\nGet the dialogues\nFind a source for the dialogues\nImport the dialogues\nGeneralize this to all episodes\n\nAnalyze the dialogues\nNumber of words per episode per season\nWhat words are the most said?\nSentiment analysis\n\n\nThe Americans is a TV show that tells the story of two KGB agents infiltrated in the USA in the 1980’s. It shows us the life of these two people, who have to do espionage missions while taking care of their children and developing their own business as their cover.\nRecently, I watched the talk of Ryan Timpe at RStudio::conf 2020 about learning R with humorous side projects. It made me think about what projects I could develop to learn new things with R, and it pushed me to mix my interest both for The Americans and for R. I thought it would be interesting to analyze the dialogues of this TV show since it required learning two new skills: scraping web data to get the dialogues, and doing text analysis to explore these dialogues.\nGet the dialogues\nFind a source for the dialogues\nApparently, contrarily to Friends, nobody developed a package containing the dialogues of The Americans yet. Therefore, I had to search online for these, and I found this website that contains all of the dialogues and other text information (lyrics, stage directions, etc.), with one page for one episode.\nThis website doesn’t provide the dialogues for the end of season 6. However, this is not a big issue. Another drawback of this website is that it doesn’t always provide information on who is talking, so it’s not possible to analyze the words of a specific person. But it’s good enough for me, I just want to train, the results don’t matter here.\nImport the dialogues\nLet’s see how to import the dialogues with episode 1 of season 1. First of all, two packages will be needed:\n\n\nlibrary(rvest)\nlibrary(tidyverse)\n\n\n\nNow, we want to obtain the details of the page containing the dialogues for the first episode:\n\n\npage <- xml2::read_html(\"http://transcripts.foreverdreaming.org/viewtopic.php?f=116&t=15871\")\n\n\n\nThis condenses all HTML information into two lists. But we only need the dialogues. Therefore, we have to find the HTML argument that contains them. To do so, we can use the Inspector in the webpage (Ctrl+Shift+C). When hovering elements on the webpage, we can see that there are several classes. Each line is embedded into p, but we notice that the whole text is in div.postbody.\n\nTherefore, we can select only this class:\n\n\npage_text <- html_node(page, \"div.postbody\") %>%\n  html_children() %>%\n  xml2::xml_find_all(\"//div[contains(@class, 'postbody')]\") %>%\n  html_text(trim = TRUE)\n\n\n\nNow, page_text is a very long vector that contains all text information. However, everything is not important here: we don’t want to analyze the lyrics of the soundtrack, the stage directions, or the name of the person who is talking. The latter could be interesting if we had it for every sentence. However, we only have it occasionally, which makes it useless. To remove this irrelevant text, we will use gsub(), a base R function.\n\n\npage_text_cleaned <- page_text %>%\n  gsub(\"♪♪\", \"\", .) %>% # double music symbol\n  gsub(\"♪ [^♪]+♪\", \"\", .) %>% # text between music symbol (= lyrics)\n  gsub(\"\\\\n\", \" \", .) %>% # new line symbol\n  gsub(\"\\\\t\", \" \", .) %>% # \\t\n  gsub(\"\\\\[[^\\\\]]*\\\\]\", \"\", ., perl = TRUE) %>% # text between brackets\n  gsub(\"\\\\([^\\\\)]*\\\\)\", \"\", ., perl = TRUE) %>% # text between parenthesis\n  gsub(\"\\\\\\\\\", \"\", .) %>% # backslash\n  gsub(\"\\\\(adsbygoogle = window.adsbygoogle \\\\|\\\\| \\\\).push\\\\(\\\\{\\\\}\\\\);\", \"\", .) %>% # ads\n  gsub(\"Philip:\", \"\", .) %>% \n  gsub(\"Elizabeth:\", \"\", .) %>%\n  gsub(\"Paige:\", \"\", .) %>%\n  gsub(\"Henry:\", \"\", .) %>%\n  gsub(\"Stan:\", \"\", .) \n\n\n\nThe text is now cleaned: most of the useless text was removed, and 99% of what’s left is the dialogues.\nGeneralize this to all episodes\nAs I said before, there is a different page for each episode. How can we generalize the previous step to all these pages?\nWell, the code we used before will be the same once we have the HTML information of the episode page. The only problem here is that we must find a way to download this HTML information for all pages. We can notice that the URL addresses are almost identical for all episodes:\nEpisode 1, season 1: http://transcripts.foreverdreaming.org/viewtopic.php?f=116&t=15871\nEpisode 2, season 1: http://transcripts.foreverdreaming.org/viewtopic.php?f=116&t=15872\nWe see here that only the argument t differs between those addresses. If we could collect all the values of t for all the pages, we could then collect the HTML information very easily. There is now another problem: what are the values of t? We could suppose that we just need to add 1 to the previous number (15871, 15872, 15873…). However, for episode 12 in season 4 for example, the value of t is 27447. Therefore, we must find another way to collect these t values.\nCollect t values\nTo do so, we use the Inspector once again, but this time on the home page, not on an episode page. Exploring the HTML tags, we notice that the t value is displayed in the class a.topictitle, among other information.\nSee the value of t in href in the inspector?Using the same code as before, we collect the text contained in this class, and extract the t value:\n\n\n# First we get the HTML information of the home page (menu 1)\nmenu_1 <- read_html(\"http://transcripts.foreverdreaming.org/viewforum.php?f=116\")\n\n# Then we obtain the text in this specific class and keep only the t value\nepisode_ids_1 <- html_node(menu_1, \"body\") %>%\n  html_children() %>%\n  xml2::xml_find_all(\"//a[contains(@class, 'topictitle')]\") %>%\n  sub('.*f=116&amp;t= *(.*?) *&amp;sid.*', \"\\\\1\", .) %>%\n  as.numeric()\n\n\n\nThe last step for this first menu is to remove the two first t values (or ids), since they correspond to “Online Store” and “Board Updates” and not to episodes.\n\n\nepisode_ids_1 <- episode_ids_1[-c(1, 2)]\n\n\n\nAfter repeating this operation for the other two menus, we finally obtain all the episode ids:\n\n\n### Second menu\nmenu_2 <- read_html(\"http://transcripts.foreverdreaming.org/viewforum.php?f=116&start=25\")\n\nepisode_ids_2 <- html_node(menu_2, \"body\") %>%\n  html_children() %>%\n  xml2::xml_find_all(\"//a[contains(@class, 'topictitle')]\") %>%\n  sub('.*f=116&amp;t= *(.*?) *&amp;sid.*', \"\\\\1\", .) %>%\n  as.numeric() \n\nepisode_ids_2 <- episode_ids_2[-c(1, 2)]\n\n### Third menu\n\nmenu_3 <- read_html(\"http://transcripts.foreverdreaming.org/viewforum.php?f=116&start=50\")\n\nepisode_ids_3 <- html_node(menu_3, \"body\") %>%\n  html_children() %>%\n  xml2::xml_find_all(\"//a[contains(@class, 'topictitle')]\") %>%\n  sub('.*f=116&amp;t= *(.*?) *&amp;sid.*', \"\\\\1\", .) %>%\n  as.numeric()\n\nepisode_ids_3 <- episode_ids_3[-c(1, 2)]\n\n\n### All episodes ids\nepisode_ids_total <- c(episode_ids_1, episode_ids_2, episode_ids_3)\n\n\n\nGet the dialogues for all episodes\nThe final step in this first part (obtaining the dialogues) is to get the dialogues for all pages. We already have the code for that, it is the first thing we made. Now, we only have to apply this code for each page, i.e for each episode id we got. To do so, we can use the {purrr} package (contained in the {tidyverse}):\n\n\nlist_dialogues <- purrr::map(episode_ids_total, .f = function(x) {\n  \n  page <- read_html(paste0(\"http://transcripts.foreverdreaming.org/viewtopic.php?f=116&t=\", x))\n  \n  page_text <- html_node(page, \"div.postbody\") %>%\n    html_children() %>%\n    xml2::xml_find_all(\"//div[contains(@class, 'postbody')]\") %>%\n    html_text(trim = TRUE)\n \n  page_text_cleaned <- page_text %>%\n    gsub(\"♪♪\", \"\", .) %>%\n    gsub(\"♪ [^♪]+♪\", \"\", .) %>%\n    gsub(\"\\\\n\", \" \", .) %>%\n    gsub(\"\\\\t\", \" \", .) %>%\n    gsub(\"\\\\[[^\\\\]]*\\\\]\", \"\", ., perl = TRUE) %>%\n    gsub(\"\\\\([^\\\\)]*\\\\)\", \"\", ., perl = TRUE) %>%\n    gsub(\"\\\\\\\\\", \"\", .) %>%\n    gsub(\"\\\\(adsbygoogle = window.adsbygoogle \\\\|\\\\| \\\\).push\\\\(\\\\{\\\\}\\\\);\", \"\", .) %>%\n    gsub(\"Philip:\", \"\", .) %>%\n    gsub(\"Elizabeth:\", \"\", .) %>%\n    gsub(\"Paige:\", \"\", .) %>%\n    gsub(\"Henry:\", \"\", .) %>%\n    gsub(\"Stan:\", \"\", .) \n  \n  return(page_text_cleaned)\n  \n})\n\n\n\nWe used the function map(), which takes two arguments: a list as input, and a function. The list we used is the list of all episode ids. The function is a custom function: it gathers the code we wrote previously and runs it for each episode id.\nWe now have list_dialogues, a list that contains 52 big character vectors (one per episode), corresponding to all the dialogues of the episodes.\nAnalyze the dialogues\nNow that we have all the dialogues for each episode, we can analyze them with the {tidytext} package. First, we must convert the big character vectors into tidy tibbles, i.e dataframes with one word per row. This can be done with unnest_tokens(), that we use in map() once again:\n\n\nlibrary(tidytext)\n\nlist_dialogues_words <- map(list_dialogues, .f = function(x) {\n  as_tibble(x) %>%\n    unnest_tokens(word, value)\n})  \n\n\n\nNumber of words per episode per season\nWith this data, we can firstly see the number of words in each episode. To do so, we compute the number of rows (i.e words) per episode and then we plot them as lines to see the evolution throughout a season.\n\n\nmap(list_dialogues_words, nrow) %>%\n  unlist() %>%\n  as_tibble() %>%\n  tibble::rowid_to_column() %>%\n  mutate(\n    season = case_when(\n      rowid %in% c(1:13) ~ 1,\n      rowid %in% c(14:26) ~ 2,\n      rowid %in% c(27:39) ~ 3,\n      rowid %in% c(40:52) ~ 4,\n      rowid %in% c(53:65) ~ 5,\n      rowid %in% c(65:70) ~ 6\n    )\n  ) %>%\n  mutate(rowid = c(rep(c(1:13), 5), 1:5)) %>%\n  ungroup() %>%\n  ggplot(aes(x = rowid, y = value, color = factor(season))) + \n  geom_line() +\n  scale_x_discrete(name = \"Episode number\", limits = factor(c(1:13))) +\n  scale_y_continuous(name = \"Number of words\") +\n  ggtitle(\"Number of words per episode per season\") +\n  scale_color_discrete(name = \"Season\")\n\n\n\n\nWe can see that the first episode of the first season is by far the one with the most words. Maybe because the first one introduces us to the situation, the plot? It is also hard to verify that we didn’t remove words by mistake in the dialogues of the other episodes.\nWhat words are the most said?\nThe {tidytext} package also allows us to identify the words that are the most used in the show. We will focus here on the first season but the code below can be easily adapted to analyze the other seasons.\nAn important item provided by {tidytext} is a dataset of stop words. Stop words are words that are very common in a language, and therefore that are irrelevant when doing text analysis. For example, “across”, “after” or “actually” do not tell anything about a text because they are too common. Also, onomatopoeia (such as “yeah” or “ugh”) do not carry much information.\nTo analyze the dialogues, we will remove those stop words and onomatopoeia using anti_join(). Then, we count the number of occurences and plot the results to see what words were the most used.\n\n\nonomatopoeia <- c(\"hey\", \"uh\", \"um\", \"yeah\", \"uhh\", \"hmm\")\n\nlist_dialogues_words[[1]] %>%\n  filter(!(word %in% onomatopoeia)) %>%\n  anti_join(stop_words, by = c(\"word\" = \"word\")) %>%\n  count(word, sort = TRUE) %>% \n  filter(n > 5) %>%\n  mutate(word = reorder(word, n)) %>%\n  ggplot(aes(word, n)) +\n  geom_col() +\n  xlab(NULL) +\n  coord_flip() +\n  geom_text(aes(label = n), nudge_y = 1) +\n  ggtitle(\"Most said words in episode 1 of season 1\")\n\n\n\n\nWe could also do this for the whole first season:\n\n\nlist_dialogues_words[1:13] %>%\n  unlist() %>%\n  as_tibble() %>%\n  rename(\"word\" = \"value\") %>%\n  filter(!(word %in% onomatopoeia)) %>%\n  anti_join(stop_words, by = c(\"word\" = \"word\")) %>%\n  count(word, sort = TRUE) %>%\n  filter(n > 50) %>%\n  mutate(word = reorder(word, n)) %>%\n  ggplot(aes(word, n)) +\n  geom_col() +\n  xlab(NULL) +\n  coord_flip() +\n  geom_text(aes(label = n), nudge_y = 10) +\n  ggtitle(\"Most said words in season 1\")\n\n\n\n\nAs we could expect, KGB, FBI and agent are in the top 15. Philip is also much more present than Elizabeth.\nSentiment analysis\nFinally, we can wonder if those words carry more positive or negative messages. Indeed, {tidytext} also provides a dataset indicating if a word is positive or negative (or neutral). Therefore, we can count the number of positive and negative words in each episode.\n\n\ndialogues_sentiment <- map_dfr(list_dialogues_words, function(x) {\n  x %>%\n    inner_join(tidytext::sentiments) %>%\n    count(sentiment)\n}) %>%\n  mutate(\n    season = c(rep(c(1:5), each = 26), rep(6, 10)),\n    episode = c(rep(rep(1:13, each = 2), times = 5), rep(1:5, each = 2))\n  )\n\n\n\nThen we can plot the evolution of this number during the four seasons:\n\n\ndialogues_sentiment %>%\n  ggplot(aes(x = episode, y = n, color = factor(sentiment))) + \n  geom_line() +\n  scale_x_discrete(name = \"Episode number\", limits = factor(c(1:13))) +\n  scale_y_continuous(name = \"Number of words\") +\n  ggtitle(paste0(\"Number of positive and negative words per episode and per season\")) +\n  facet_wrap(~ season) +\n  scale_color_discrete(\"Sentiment\")\n\n\n\n\nAnd finally, we can determine the positive and negative words that are the most said in the first season:\n\n\nlist_dialogues_words[1:13] %>%\n  unlist() %>%\n  as_tibble() %>%\n  rename(\"word\" = \"value\") %>%\n  inner_join(tidytext::sentiments) %>%\n  group_by(word) %>%\n  mutate(n = n()) %>%\n  ungroup() %>%\n  distinct() %>%\n  top_n(30) %>%\n  mutate(word = reorder(word, n)) %>%\n  ggplot(aes(word, n, fill = sentiment)) +\n  geom_col() +\n  xlab(NULL) +\n  coord_flip() +\n  facet_wrap(~ sentiment, scales = \"free_y\") +\n  geom_text(aes(label = n), nudge_y = 10) + \n  ggtitle(\"Positive and negative words most used in season 1\")\n\n\n\n\nOverall I think the advice of Ryan Timpe is very good: side projects (humorous or not) are very useful to learn new skills in R. To write this blog post, I had to learn how to scrape the dialogues from a website with {rvest} and how to use the {tidytext} package. I hope this was useful to you too!\nYou can find all the code used in this dedicated repo.\n\nSession Info\nThis is my session info, so that you can see the versions of packages used. This is useful if the results in my post are no longer reproducible because packages changed. The packages with a star (*) are those explicitely called in the script.\n\n─ Session info ─────────────────────────────────────────────────────\n setting  value                       \n version  R version 4.0.3 (2020-10-10)\n os       Ubuntu 18.04.5 LTS          \n system   x86_64, linux-gnu           \n ui       X11                         \n language en                          \n collate  fr_FR.UTF-8                 \n ctype    fr_FR.UTF-8                 \n tz       Europe/Paris                \n date     2021-01-20                  \n\n─ Packages ─────────────────────────────────────────────────────────\n package     * version date       lib\n assertthat    0.2.1   2019-03-21 [1]\n backports     1.2.1   2020-12-09 [1]\n broom         0.7.3   2020-12-16 [1]\n cellranger    1.1.0   2016-07-27 [1]\n cli           2.2.0   2020-11-20 [1]\n colorspace    2.0-0   2020-11-11 [1]\n crayon        1.3.4   2017-09-16 [1]\n curl          4.3     2019-12-02 [1]\n DBI           1.1.1   2021-01-15 [1]\n dbplyr        2.0.0   2020-11-03 [1]\n digest        0.6.27  2020-10-24 [1]\n distill       1.2     2021-01-13 [1]\n downlit       0.2.1   2020-11-04 [1]\n dplyr       * 1.0.3   2021-01-15 [1]\n ellipsis      0.3.1   2020-05-15 [1]\n evaluate      0.14    2019-05-28 [1]\n fansi         0.4.2   2021-01-15 [1]\n farver        2.0.3   2020-01-16 [1]\n forcats     * 0.5.0   2020-03-01 [1]\n fs            1.5.0   2020-07-31 [1]\n generics      0.1.0   2020-10-31 [1]\n ggplot2     * 3.3.3   2020-12-30 [1]\n glue          1.4.2   2020-08-27 [1]\n gtable        0.3.0   2019-03-25 [1]\n haven         2.3.1   2020-06-01 [1]\n hms           1.0.0   2021-01-13 [1]\n htmltools     0.5.1   2021-01-12 [1]\n httr          1.4.2   2020-07-20 [1]\n janeaustenr   0.1.5   2017-06-10 [1]\n jsonlite      1.7.2   2020-12-09 [1]\n knitr         1.30    2020-09-22 [1]\n labeling      0.4.2   2020-10-20 [1]\n lattice       0.20-41 2020-04-02 [4]\n lifecycle     0.2.0   2020-03-06 [1]\n lubridate     1.7.9.2 2020-11-13 [1]\n magrittr      2.0.1   2020-11-17 [1]\n Matrix        1.2-18  2019-11-27 [4]\n modelr        0.1.8   2020-05-19 [1]\n munsell       0.5.0   2018-06-12 [1]\n pillar        1.4.7   2020-11-20 [1]\n pkgconfig     2.0.3   2019-09-22 [1]\n purrr       * 0.3.4   2020-04-17 [1]\n R6            2.5.0   2020-10-28 [1]\n Rcpp          1.0.6   2021-01-15 [1]\n readr       * 1.4.0   2020-10-05 [1]\n readxl        1.3.1   2019-03-13 [1]\n reprex        0.3.0   2019-05-16 [1]\n rlang         0.4.10  2020-12-30 [1]\n rmarkdown     2.6.4   2021-01-19 [1]\n rstudioapi    0.13    2020-11-12 [1]\n rvest       * 0.3.6   2020-07-25 [1]\n scales        1.1.1   2020-05-11 [1]\n selectr       0.4-2   2019-11-20 [1]\n sessioninfo   1.1.1   2018-11-05 [1]\n SnowballC     0.7.0   2020-04-01 [1]\n stringi       1.5.3   2020-09-09 [1]\n stringr     * 1.4.0   2019-02-10 [1]\n tibble      * 3.0.5   2021-01-15 [1]\n tidyr       * 1.1.2   2020-08-27 [1]\n tidyselect    1.1.0   2020-05-11 [1]\n tidytext    * 0.3.0   2021-01-06 [1]\n tidyverse   * 1.3.0   2019-11-21 [1]\n tokenizers    0.2.1   2018-03-29 [1]\n vctrs         0.3.6   2020-12-17 [1]\n withr         2.4.0   2021-01-16 [1]\n xfun          0.20    2021-01-06 [1]\n xml2        * 1.3.2   2020-04-23 [1]\n yaml          2.2.1   2020-02-01 [1]\n source                            \n CRAN (R 4.0.0)                    \n CRAN (R 4.0.3)                    \n CRAN (R 4.0.3)                    \n CRAN (R 4.0.0)                    \n CRAN (R 4.0.3)                    \n CRAN (R 4.0.3)                    \n CRAN (R 4.0.0)                    \n CRAN (R 4.0.0)                    \n CRAN (R 4.0.3)                    \n CRAN (R 4.0.3)                    \n CRAN (R 4.0.3)                    \n CRAN (R 4.0.3)                    \n CRAN (R 4.0.3)                    \n CRAN (R 4.0.3)                    \n CRAN (R 4.0.0)                    \n CRAN (R 4.0.0)                    \n CRAN (R 4.0.3)                    \n CRAN (R 4.0.0)                    \n CRAN (R 4.0.0)                    \n CRAN (R 4.0.2)                    \n CRAN (R 4.0.3)                    \n CRAN (R 4.0.3)                    \n CRAN (R 4.0.2)                    \n CRAN (R 4.0.0)                    \n CRAN (R 4.0.0)                    \n CRAN (R 4.0.3)                    \n CRAN (R 4.0.3)                    \n CRAN (R 4.0.2)                    \n CRAN (R 4.0.0)                    \n CRAN (R 4.0.3)                    \n CRAN (R 4.0.3)                    \n CRAN (R 4.0.3)                    \n CRAN (R 4.0.0)                    \n CRAN (R 4.0.0)                    \n CRAN (R 4.0.3)                    \n CRAN (R 4.0.3)                    \n CRAN (R 4.0.0)                    \n CRAN (R 4.0.0)                    \n CRAN (R 4.0.0)                    \n CRAN (R 4.0.3)                    \n CRAN (R 4.0.0)                    \n CRAN (R 4.0.0)                    \n CRAN (R 4.0.3)                    \n CRAN (R 4.0.3)                    \n CRAN (R 4.0.3)                    \n CRAN (R 4.0.0)                    \n CRAN (R 4.0.0)                    \n CRAN (R 4.0.3)                    \n Github (rstudio/rmarkdown@2e8572e)\n CRAN (R 4.0.3)                    \n CRAN (R 4.0.2)                    \n CRAN (R 4.0.0)                    \n CRAN (R 4.0.0)                    \n CRAN (R 4.0.0)                    \n CRAN (R 4.0.0)                    \n CRAN (R 4.0.2)                    \n CRAN (R 4.0.0)                    \n CRAN (R 4.0.3)                    \n CRAN (R 4.0.2)                    \n CRAN (R 4.0.0)                    \n CRAN (R 4.0.3)                    \n CRAN (R 4.0.2)                    \n CRAN (R 4.0.0)                    \n CRAN (R 4.0.3)                    \n CRAN (R 4.0.3)                    \n CRAN (R 4.0.3)                    \n CRAN (R 4.0.3)                    \n CRAN (R 4.0.0)                    \n\n[1] /home/etienne/R/x86_64-pc-linux-gnu-library/4.0\n[2] /usr/local/lib/R/site-library\n[3] /usr/lib/R/site-library\n[4] /usr/lib/R/library\n\n\n\n\n",
    "preview": "posts/2020-10-04-the-americans/distill-preview.png",
    "last_modified": "2023-02-16T14:16:35+00:00",
    "input_file": {},
    "preview_width": 1248,
    "preview_height": 768
  },
  {
    "path": "posts/2020-07-16-tips-and-tricks-r-markdown/",
    "title": "Writing a Master's thesis with R Markdown and Bookdown",
    "description": "I wrote my Master's thesis with bookdown. This post contains some tips to modify the layout and other stuff.",
    "author": [
      {
        "name": "Etienne Bacher",
        "url": {}
      }
    ],
    "date": "2020-07-16",
    "categories": [],
    "contents": "\n\nContents\nWhy bookdown?\nLaTeX packages and commands\nTitlepage, acknowledgements and abstract\nInclude LaTeX files in YAML\nSummary\n\nI finished my Master’s thesis very recently, and I wrote it with R Markdown, and more precisely with the bookdown package. It was really comfortable to do absolutely everything with R: data treatment, use of econometric methods, redaction with chunk of codes, and even the slides for the presentation! However, I have also spent a non-negligible part of my time trying to have a correct layout, essentially for the first pages. I found that some things were not as easy to do as they should be. This post contains some solutions to these problems.\nWhy bookdown?\nA small preamble before starting to list these problems and solutions: why did I use bookdown and not rmarkdown? bookdown has a few advantages that are very important when writing a Master’s thesis (or an academic paper in general), such as cross-references between sections, figures, tables, etc. See the bookdown book for all the details.\nWhile it is possible to create a bookdown project with RStudio, I “manually” made my own, because I have the impression there are a lot of files created automatically by RStudio that would just confuse myself. Therefore, I had a file containing the YAML and the chunks necessary to load all the packages needed and to run the child documents. Child documents are .Rmd files that contain only some Markdown text and code chunks (no YAML). They make it much easier to write a thesis since it is possible to divide it in several pieces (introduction, literature review, method, etc.).\nIn addition to Global.Rmd (which contains YAML and setup chunks), I used two .tex files: preamble.tex is where I put all the LaTeX commands and packages I used, and titlepage.tex to make my custom titlepage, acknowledgments and abstract before the table of contents.\nLaTeX packages and commands\nIn preamble.tex, I put all the LaTeX commands, many of them being \\usepackage. For example, the R package kableExtra provides a list of LaTeX packages required to be able to customize the tables (see here).\nHere’s a small list of the commands I used for my thesis.\n\\renewcommand{\\baselinestretch}{1.3} to change the space between lines;\n\\pagenumbering{gobble} to remove page numbering for the first pages, that contain the title, the table of content (TOC), the lists of figures and tables (LOF and LOT) and some blank pages. I used \\pagenumbering{arabic} after the YAML to start the page numbering at the right place.\n\\usepackage{caption}; \\captionsetup[table]{name=Tableau}; \\captionsetup[figure]{name=Figure}. These three commands (to put on three separate lines) are here to change the name of tables and figures. If you’re writing in English, you probably won’t need them, but they were necessary to write in French.\nthe following lines create a new command to create a blank page after the titlepage. Strangely, \\pagebreak or \\newpage didn’t work inside the titlepage and I had to find an alternative:\n\nCommand to create a blank page\n\n\\usepackage{afterpage}\n\\newcommand\\blankpage{%\n    \\null\n    \\thispagestyle{empty}%\n    \\addtocounter{page}{-1}%\n    \\newpage}\n\nTitlepage, acknowledgements and abstract\nConcerning these three components, I put them in another file named titlepage.tex. This is the layout I wanted:\na titlepage with some logos and some information on my thesis and my university;\na blank page;\nacknowledgements on a new page;\nabstract on a new page;\nTOC, LOF and LOT on a new page.\nTo do so, I started the titlepage with \\begin{titlepage} and customized it as I wanted. But before putting \\end{titlepage}, I placed \\afterpage{\\blankpage}, which is the command we define in preamble.tex. With this, I had a titlepage and a blank page.\nThe next step was to create two pages containing the acknowledgements and the abstract This was easily done in LaTeX, and this time I could use \\pagebreak at the end of the acknowledgements to create a new page for the abstract. I also put another \\pagebreak to finish titlepage.tex, so that TOC, LOF and LOT (created in the YAML) could start on a new page.\nInclude LaTeX files in YAML\nAs explained, I had two .tex files to run when compiling the R Markdown file:\npreamble.tex is a list of commands that should be placed before \\begin{document} when this .Rmd file will be converted to .tex. Therefore, I used in_header in the YAML to compile it.\ntitlepage.tex contains some elements that should be in the final PDF document. Since this should appear first (before the rest of the .Rmd document), I used before_body in the YAML.\nSummary\nHere are examples of the three files: Global.Rmd, preamble.tex and titlepage.tex.\nGlobal.Rmd\n\n---\noutput: \n  bookdown::pdf_book:\n    includes:\n      in_header: preamble.tex\n      before_body: titlepage.tex\n    keep_tex: true\n    toc: yes\n    toc_depth: 3\nindent: true\nlink-citations: yes\nlot: true\nlof: true\n---\n\n<!-- Start the redaction on a new page -->\n\\newpage\n\n<!-- Start page numbering where the redaction starts -->\n\\pagenumbering{arabic}\n\n```{r globaloptions, include=FALSE}\n# Include here chunk options\n```\n\n```{r packages}\n# Load here the packages\n```\n\n<!-- Call the child documents -->\n```{r body, child = c('01-Intro.Rmd', '02-Literature.Rmd', '03-Data-and-method.Rmd', '04-Results.Rmd', '05-Discussion.Rmd', '06-Conclusion.Rmd')}\n```\n\n<!-- Placement of bibliography -->\n# References {-}\n\n<div id=\"refs\"><\/div>\n\n\n<!-- Place the appendix after the bibliography -->\n```{r appendix, child = c('07--Appendix.Rmd')}\n```\n\npreamble.tex\n\n% Line spacing\n\\renewcommand{\\baselinestretch}{1.3}\n\n% Page number and chapter at the top of the page\n\\pagestyle{headings}\n\n% Important packages\n\\usepackage[utf8]{inputenc}\n\\usepackage[T1]{fontenc}\n\\usepackage[dvipsnames]{xcolor}\n\\usepackage{hyperref}\n\\usepackage{dcolumn}\n\\usepackage{booktabs}\n\\usepackage{longtable}\n\n% Figure and table names \n\\usepackage{caption}\n\\captionsetup[table]{name=Tableau} \n\\captionsetup[figure]{name=Figure}\n\n% Packages for kableExtra\n\\usepackage{array}\n\\usepackage{multirow}\n\\usepackage{wrapfig}\n\\usepackage{colortbl}\n\\usepackage{pdflscape}\n\\usepackage{float}\n\\usepackage{tabu}\n\\usepackage{threeparttable}\n\\usepackage{threeparttablex}\n\\usepackage[normalem]{ulem}\n\\usepackage{makecell}\n\n% Remove page numbering before start of redaction\n\\pagenumbering{gobble}\n\n% Command to make a blank page\n\\usepackage{afterpage}\n\\newcommand\\blankpage{%\n    \\null\n    \\thispagestyle{empty}%\n    \\addtocounter{page}{-1}%\n    \\newpage}\n\ntitlepage.tex\n\n\\begin{titlepage}\n\\centering\nTitle of my thesis\n\\afterpage{\\blankpage}\n\\end{titlepage}\n\n\\section*{Acknowledgements}\nThanks everyone\n\\pagebreak\n\n\\begin{center}\n\\textbf{Abstract}\n\\end{center}\nBla bla bla...\n\\pagebreak\n\nHope this helps!\n\n\n\n",
    "preview": {},
    "last_modified": "2023-02-16T14:16:35+00:00",
    "input_file": {}
  },
  {
    "path": "posts/2020-05-22-code-doesnt-work/",
    "title": "What to do when your code doesn't work?",
    "description": "This is the list of actions I make when I have an error in R.",
    "author": [
      {
        "name": "Etienne Bacher",
        "url": {}
      }
    ],
    "date": "2020-05-22",
    "categories": [],
    "contents": "\n\nContents\nRead the error message\nSearch on StackOverflow and RStudio Community\nSearch on Github\nPost my question online - Part 1\nPost my question online - Part 2\nAdditional resources\n\nAs Jenny Bryan said, one of the first things people do when there is a problem with the code is run it a second time. But in 95% of the cases (in my small programming experience), this does not solve the problem, and I realized I developed a small pattern of reactions when I am in this situation.\nRead the error message\nThis may seem obvious since this is the first thing we see when there is an error. However, some messages (like those in the tidyverse packages) are really helpful and are enough to solve the problem.\nAs you spend time programming, some error messages become quite familiar over time. You don’t necessarily need to fully understand the message, just remember how you solved the error when you saw this. But this does not help if this is the first time you see the message.\nSearch on StackOverflow and RStudio Community\nIf the error message was not helpful, I quickly go to step 2: search online (which is almost always equivalent to “search on StackOverflow and RStudio Community”). Those are the two places where you have the most odds of finding an answer to your problem. If your problem concerns mainstream packages (once again, such as the tidyverse ones), then there will always be at least one person who had a similar problem for which a solution was given.\nSearch on Github\nIf no answer was available on these two websites, I usually go a step further and search about it on GitHub, especially if the problem comes from an unknown and/or new package. Indeed, the source code of a lot of R packages is available on GitHub, as well as the brand-new versions (not on CRAN yet). It is also the place where people make feedback on some issues or help develop the package.\nIt happens that somebody reported a similar issue and that the package maintainer answered. If not, well, it is always useful to see the situations in which people use the package, or to learn new functions of this package.\nPost my question online - Part 1\nI have an error, I don’t understand the error message and there are no answers online. What can I do now?\nYou can post your question on one of the websites I mentioned. My order of preference is:\nStackOverflow: in general, more people see your message and therefore more people might answer your question.\nRStudio Community: more “specialized” and some mainstream packages maintainers are there. Also useful when the question is about RStudio IDE (not to be confused with the R language) since they developed it.\nGitHub: clearly the problem comes from an error specific to the package and I couldn’t find an answer online. Most of the time, there is no need to create new issues.\nHowever: posting a question online implies that you need to create a reproducible example. What is a reproducible example?\nSuppose that you are working on your data and have a problem. You may want to copy and paste your code online. It’s quick and easy. But try to imagine you’re someone on StackOverflow that sees your code for the first time. This person needs to run it to understand what your code does and what the problem is. But that’s impossible, because you load CSV data that is only available for you, or because you forgot to mention the packages you’re using. Therefore, no one can run your code and the odds of someone solving your problem plummet.\nIf you post online, your post MUST contain:\nA description of what you’re trying to do and of your problem in plain text.\nSome code that contains:\nthe library() calls needed to run every function you use (but no need to put packages that you never use in your example)\na code that can be copied and pasted in a new R session and that ends up in the same situation as you’re in. That means that the data you use must be reproducible.\nthe expected output, if possible. If you can easily show the output you want, do it. It will be easier to help you if you show what you want. In some cases (e.g Shiny apps), it is not always possible or easy to provide this, so it is not a 100% necessary.\n\nMaking a reproducible example takes time but is incredibly helpful. Open a new tab in RStudio, try to simplify your situation as much as possible and to make it reproducible by using data available for everyone. For example, some datasets are automatically in R, such as mtcars or iris. Don’t forget to mention the packages you use in library(). Once you think you have finished (you show what packages you use, you keep your example as small as possible and you show the expected output), restart the session (ctrl + shift + F10) and see if it runs and if it reproduces the same error. If it doesn’t, it means your example is not reproducible and that you have to improve it.\nI would say that I solve the problem myself by making a reproducible example in 70% of the cases, so taking the time to make one is worth it!\nPost my question online - Part 2\nHowever, if you didn’t solve your problem with this (and if your example is reproducible), you can post it on StackOverflow or RStudio Community. Don’t forget to explain your situation and your code, don’t paste it without any details!\nHopefully, you’ll have an answer.\nAdditional resources\nHere are two pages with details about making a reproducible example:\nhttps://stackoverflow.com/help/minimal-reproducible-example\nhttps://stackoverflow.com/questions/5963269/how-to-make-a-great-r-reproducible-example\n\n\n\n",
    "preview": {},
    "last_modified": "2023-02-16T14:16:35+00:00",
    "input_file": {}
  },
  {
    "path": "posts/2020-04-08-my-shiny-app/",
    "title": "My application for the Shiny Contest (2020)",
    "description": "A presentation of the application I submitted to the Shiny Contest 2nd edition.",
    "author": [
      {
        "name": "Etienne Bacher",
        "url": {}
      }
    ],
    "date": "2020-04-08",
    "categories": [],
    "contents": "\nOne of the greatest things about R is the possibility to build websites quite easily with R Shiny. I started to create apps with Shiny almost immediately after having discovered it. This was in May last year and two months later I thought it would be a great idea to build an app to treat more easily World Bank data. Indeed, in my field, World Development Indicators (WDI) are often used and I thought it would be useful to have a graphical interface where we can import and treat these indicators.\nSo in July last year I started to work on this. Besides building something useful, I considered this as a good opportunity to practice with R Shiny. I worked on that irregularly during the rest of the year. Sometimes I considerably improved my app in a week and sometimes I spent two months not thinking about it.\nIn January, I was quite stuck: my app required to generate pieces of UI (User Interface) on the fly and I didn’t know how to do that. But when I saw the announcement for the second edition of the Shiny Contest, I convinced myself to give it a try and worked a lot on my app, especially since I finally understood how to use modules. Therefore, after a few weeks, I could finally deploy my app and participate to the contest. Given the incredible apps of other participants (just look at the “Shiny Contest” tag on RStudio Community), I know that there is not a chance that I win something but nonetheless I am very proud of having the possibility to show what I can do.\n“That’s very good”, you may say, “but what does your app do?”. Well if you are familiar with the WDIs, you know that each indicator has an ID (like “NV.AGR.TOTL.ZS”). Using this ID in my app, you can import the dataset related, choose the type of data you want (cross-country, time series, panel data), the country/countries and year(s) you want and compute the logarithm, the squared value and the lagged value of the variable. You may also generate a plot that you can download for this dataset. You can import and manipulate as many datasets as you desire and when you are done, you can merge them in a final dataset that is also downloadable. Finally, since reproducibility is a big aspect in science, all the manipulations you did are translated into R code so that you can copy and paste this code in a fresh R session and it will reproduce everything you have done. This was made possible thanks the great (but still experimental) shinymeta package1.\nYou can try the app here, but if it has been removed by the time you go checking it, you may find the source code for the whole app on GitHub.\n\nLuckily, I have discovered this package a month before I launched my app, in a rstudio::conf 2020 presentation by Carson Sievert↩︎\n",
    "preview": {},
    "last_modified": "2023-02-16T14:16:35+00:00",
    "input_file": {}
  },
  {
    "path": "posts/2020-04-06-my-favorite-shortcuts/",
    "title": "My favorite shortcuts in RStudio",
    "description": "Did you know that RStudio contains a lot of shortcuts to write code faster? Here are my favorites.",
    "author": [
      {
        "name": "Etienne Bacher",
        "url": {}
      }
    ],
    "date": "2020-04-06",
    "categories": [],
    "contents": "\n\nContents\n“Ctrl+Shift+Enter”: run the whole script\n“Ctrl+Shift+F10”: restart R session\n“Ctrl+Shift+K”: knit Markdown documents\n“Ctrl+Alt+B”: run the script from the beginning to where I am\n“Ctrl+Shift+A”: good alignment\n“Ctrl+Shift+R”: new section label\n“Ctrl+Shift+N”: new file\n“Ctrl+Shift+C”: comment and un-comment lines of code\n\nCurrently working on my master’s thesis, I spend almost half on my day on R (the other half being spent reading articles). I have learnt a few very useful shortcuts by reading blog posts or free R books here and there and I have decided to make a small list of those I use most.\n“Ctrl+Shift+Enter”: run the whole script\nThis combination will run all of your script, wherever the mouse is in the script. This considerably saves some time and is much more convenient than having to drag the mouse up to the “Run” button.\n“Ctrl+Shift+F10”: restart R session\nAlmost all your work will have to be done again one day, either by you or by somebody else. That day, you will regret not having saved all the packages you needed in your R script. How is that possible? Well, it comes from the fact that I (and presumably other people too) load some packages and their dependencies in the same session because we test some packages, or because we are trying to solve a StackOverflow problem during a break, etc. Therefore, when you were writing it, some of your code was running only thanks to some packages you didn’t keep in your script.\nTo prevent this to happen again, you can run “Ctrl+Shift+F10” sometimes: it restarts the R session (but does not close RStudio) and allows to see quickly if your code can run all by itself. When I have finished writing a chunk of code, I always do “Ctrl+Shift+F10” and “Ctrl+Shift+Enter” to make sure that my code can run again in three months or more.\n“Ctrl+Shift+K”: knit Markdown documents\nI do not use this everywhere but only in Markdown documents: it knits the document. As “Ctrl+Shift+Enter” replaces the “Run” button, “Ctrl+Shift+K” replaces the “Knit” button.\n“Ctrl+Alt+B”: run the script from the beginning to where I am\nThis is similar to “Ctrl+Shift+Enter” but it runs the script only until your mouse.\n“Ctrl+Shift+A”: good alignment\nIndentation is quite important to have a code that is readable, especially when you begin to write more than 10 lines of code. Select your code (or just a piece of it) and do this combination to apply indentation rules automatically.\n“Ctrl+Shift+R”: new section label\nThis creates a new section in your code, with the title you choose. Quite convenient to keep a readable code.\n“Ctrl+Shift+N”: new file\nIf you want to try a chunk of code quickly, you can run this combination to open a new file in RStudio.\n“Ctrl+Shift+C”: comment and un-comment lines of code\nTo me, this is one of the most convenient shortcut. It simply allows to comment (and un-comment) at once all the lines selected.\n\nThe complete list of shortcuts is available in “Tools -> Keyboard Shortcuts Help” in RStudio. Other useful tools:\nsnippets\naddins\nRStudio tips (on Twitter)\n\n\n\n",
    "preview": {},
    "last_modified": "2023-02-16T14:16:35+00:00",
    "input_file": {}
  },
  {
    "path": "posts/2020-01-22-first-contact/",
    "title": "First contact with the data on R",
    "description": "A blog post describing the first steps of data cleaning and analysis using R.",
    "author": [
      {
        "name": "Etienne Bacher",
        "url": {}
      }
    ],
    "date": "2020-01-22",
    "categories": [],
    "contents": "\n\nContents\nFiles used and organization of the project\nImport data\nMerge dataframes\nClean the data\nDescriptive Statistics\nPlots\n\n\n Note: \n\n\nIn this and future articles, you will see some arrows below R code. If you click on it, it will display the Stata code equivalent to the R code displayed. However, since those are two different softwares, they are not completely equivalent and some of the Stata code may not fully correspond to the R code. Consider it more like a reference point not to be lost rather than like an exact equivalent.\n\n\nIn this post, you will see how to import and treat data, make descriptive statistics and a few plots. I will also show you a personal method to organize one’s work.\nFiles used and organization of the project\nFirst of all, you need to create a project. In RStudio, you can do “File”, “New Project” and then choose the location of the project and its name. In the folder that contains the project, I have several sub-folders: Figures, Bases_Used, Bases_Created. To be able to save or use files in these particular sub-folders, I use the package here. The command here() shows the path to your project and you just need to complete the path to access to your datasets or other files.\n\n\n# if you've never installed this package before, do:\n# install.packages(\"here\")\nlibrary(here)\n\n\n\nWhy is this package important? Your code must be reproducible, either for your current collaborators to work efficiently with you or for other people to check your code and to use it in the future. Using paths that work only for your computer (like “/home/Mr X/somefolder/somesubfolder/Project”) makes it longer and more annoying to use your code since it requires to manually change paths in order to import data or other files. The package here makes it much easier to reproduce your code since it automatically detects the path to access to your data. You only need to keep the same structure between R files and datasets. You will see in the next part how to use it.\nImport data\nWe will use data contained in Excel (.xlsx) and text (.txt) files. You can find these files (and the full R script corresponding to this post) here. To import Excel data, we will need the readxl package.\n\n\nlibrary(readxl)\n\n\n\nWe use the read_excel function of this package to import excel files and the function read.table (in base R) to import the data:\n\n\n\nbase1 <- read_excel(here(\"Bases_Used/Base_Excel.xlsx\"), sheet = \"Base1\")\nbase2 <- read_excel(here(\"Bases_Used/Base_Excel.xlsx\"), sheet = \"Base2\")\nbase3 <- read_excel(here(\"Bases_Used/Base_Excel.xlsx\"), sheet = \"Base3\")\nbase4 <- read.table(here(\"Bases_Used/Base_Text.txt\"), header = TRUE)\n\n\n\n\n\nStata\n\ncd \"/path/to/Bases_Used\"\nimport excel using Base_Excel, sheet(\"Base1\") firstrow\nAs you can see, if your project is in a folder and if you stored you datasets in the Bases_Used subfolder, this code will work automatically since here detects the path. Now, we have stored the four datasets in four objects called data.frames. To me, this simple thing is an advantage on Stata where storing multiple datasets in the same time is not intuitive at all.\nMerge dataframes\nWe want to have a unique dataset to make descriptive statistics and econometrics (we will just do descriptive statistics in this post). Therefore, we will merge these datasets together, first by using the dplyr package. This package is one of the references for data manipulation. It is extremely useful and much more easy to use than base R. You may find a cheatsheet (i.e. a recap of the functions) for this package here, along with cheatsheets of many other great packages.\nFirst, we want to regroup base1 and base2. To do so, we just need to put one under the other and to “stick” them together with bind_rows and we observe the result:\n\n\nlibrary(dplyr)\nbase_created <- bind_rows(base1, base2)\nbase_created\n\n\n# A tibble: 23 x 6\n    hhid indidy1 surname   name     gender  wage\n   <dbl>   <dbl> <chr>     <chr>     <dbl> <dbl>\n 1     1       1 BROWN     Robert        1  2000\n 2     1       2 JONES     Michael       1  2100\n 3     1       3 MILLER    William       1  2300\n 4     1       4 DAVIS     David         1  1800\n 5     2       1 RODRIGUEZ Mary          2  3600\n 6     2       2 MARTINEZ  Patricia      2  3500\n 7     2       3 WILSON    Linda         2  1900\n 8     2       4 ANDERSON  Richard       1  1900\n 9     3       1 THOMAS    Charles       1  1800\n10     3       2 TAYLOR    Barbara       2  1890\n# … with 13 more rows\n\n\nStata\n\npreserve\n\n*** Open base #2 and bind the rows\nclear all \nimport excel using Base_Excel, sheet(\"Base2\") firstrow\ntempfile base2\nsave  `base2' \nrestore\nappend using `base2'\nAs you can see, we obtain a dataframe with 6 columns (like each table separately) and 23 rows: 18 in the first table, 5 in the second table. Now, we merge this dataframe with base3. base_created and base3 only have one column in common (hhid) so we will need to specify that we want to merge these two bases by this column:\n\n\nbase_created <- left_join(base_created, base3, by = \"hhid\")\nbase_created\n\n\n# A tibble: 23 x 7\n    hhid indidy1 surname   name     gender  wage location\n   <dbl>   <dbl> <chr>     <chr>     <dbl> <dbl> <chr>   \n 1     1       1 BROWN     Robert        1  2000 France  \n 2     1       2 JONES     Michael       1  2100 France  \n 3     1       3 MILLER    William       1  2300 France  \n 4     1       4 DAVIS     David         1  1800 France  \n 5     2       1 RODRIGUEZ Mary          2  3600 England \n 6     2       2 MARTINEZ  Patricia      2  3500 England \n 7     2       3 WILSON    Linda         2  1900 England \n 8     2       4 ANDERSON  Richard       1  1900 England \n 9     3       1 THOMAS    Charles       1  1800 Spain   \n10     3       2 TAYLOR    Barbara       2  1890 Spain   \n# … with 13 more rows\n\n\nStata\n\npreserve \n\n*** Open base #3 and merge\nclear all\ncd ..\\Bases_Used \nimport excel using Base_Excel, sheet(\"Base3\") firstrow\ntempfile base3\nsave `base3'\nrestore \nmerge m:1 hhid using `base3' \ndrop _merge \nleft_join is a dplyr function saying that the first dataframe mentioned (here base_created) is the “most important” and that we will stick the second one (here base3) to it. If there are more rows in the first one than in the second one, then there will be some missing values but the number of rows will stay the same. If we knew that base3 had more rows than base_created, we would have used right_join.\nWe now want to merge base_created with base4. The problem is that there are no common columns so we will need to create one in each. Moreover, base_created contains data for the year 2019 and base4 for the year 2020. We will need to create columns to specify that too:\n\n\n# rename the second column of base_created and of base4\ncolnames(base_created)[2] <- \"indid\"\ncolnames(base4)[2] <- \"indid\"\n\n# create the column \"year\", that will take the value 2019 \n# for base_created and 2020 for base4\nbase_created$year <- 2019\nbase4$year <- 2020\n\n\n\nFrom this point, we can merge these two dataframes:\n\n\nbase_created2 <- bind_rows(base_created, base4)\nbase_created2\n\n\n# A tibble: 46 x 8\n    hhid indid surname   name     gender  wage location  year\n   <dbl> <dbl> <chr>     <chr>     <dbl> <dbl> <chr>    <dbl>\n 1     1     1 BROWN     Robert        1  2000 France    2019\n 2     1     2 JONES     Michael       1  2100 France    2019\n 3     1     3 MILLER    William       1  2300 France    2019\n 4     1     4 DAVIS     David         1  1800 France    2019\n 5     2     1 RODRIGUEZ Mary          2  3600 England   2019\n 6     2     2 MARTINEZ  Patricia      2  3500 England   2019\n 7     2     3 WILSON    Linda         2  1900 England   2019\n 8     2     4 ANDERSON  Richard       1  1900 England   2019\n 9     3     1 THOMAS    Charles       1  1800 Spain     2019\n10     3     2 TAYLOR    Barbara       2  1890 Spain     2019\n# … with 36 more rows\n\n\nStata\n\n\nrename indidy1 indid \ngen year=2019 \npreserve \n\n* Open base #4 and merge\nclear all\nimport delimited Base_Text.txt \nrename indidy2 indid \ngen year=2020\ntempfile base4\nsave `base4'\nrestore \n\nmerge 1:1 hhid indid year using `base4'\ndrop _merge\nBut we have many missing values for the new rows because base4 only contained three columns. We want to have a data frame arranged by household then by individual and finally by year. Using only dplyr functions, we can do:\n\n\nbase_created2 <- base_created2 %>% \n  group_by(hhid, indid) %>% \n  arrange(hhid, indid, year) %>%\n  ungroup()\nbase_created2\n\n\n# A tibble: 46 x 8\n    hhid indid surname   name    gender  wage location  year\n   <dbl> <dbl> <chr>     <chr>    <dbl> <dbl> <chr>    <dbl>\n 1     1     1 BROWN     Robert       1  2000 France    2019\n 2     1     1 <NA>      <NA>        NA  2136 <NA>      2020\n 3     1     2 JONES     Michael      1  2100 France    2019\n 4     1     2 <NA>      <NA>        NA  2362 <NA>      2020\n 5     1     3 MILLER    William      1  2300 France    2019\n 6     1     3 <NA>      <NA>        NA  2384 <NA>      2020\n 7     1     4 DAVIS     David        1  1800 France    2019\n 8     1     4 <NA>      <NA>        NA  2090 <NA>      2020\n 9     2     1 RODRIGUEZ Mary         2  3600 England   2019\n10     2     1 <NA>      <NA>        NA  3784 <NA>      2020\n# … with 36 more rows\n\nNotice that there are some %>% between the lines: it is a pipe and its function is to connect lines of code between them so that we don’t have to write base_created2 every time. Now that our dataframe is arranged, we need to fill the missing values. Fortunately, these missing values do not change for an individual since they concern the gender, the location, the name and the surname. So basically, we can just take the value of the cell above (corresponding to year 2019) and replicate it in each cell (corresponding to year 2020):\n\n\nlibrary(tidyr)\nbase_created2 <- base_created2 %>%\n  fill(select_if(., ~ any(is.na(.))) %>% \n         names(),\n       .direction = 'down')\n\n\n\n\nStata\n\nforeach x of varlist surname name gender location {\n  bysort hhid indid: replace `x'=`x'[_n-1] if year==2020\n}\nLet me explain the code above:\nfill aims to fill cells\nselect_if selects columns according to the condition defined\nany(is.na(.)) is a logical question asking if there are missing values (NA)\n. indicates that we want to apply the function to the whole dataframe\nnames tells us what the names of the columns selected are\n.direction tells the direction in which the filling goes\nSo fill(select_if(., ~ any(is.na(.))) %>% names(), .direction = 'down') means that for the dataframe, we select each column which has some NA in it and we obtain their names. In these columns, the empty cells are filled by the value of the cell above (since the direction is “down”).\nFinally, we want the first three columns to be hhid, indid and year, and we create a ID column named hhind which is just the union of hhid and indid.\n\n\nbase_created2 <- base_created2 %>%\n  select(hhid, indid, year, everything()) %>%\n  unite(hhind, c(hhid, indid), sep = \"\", remove = FALSE) \nbase_created2\n\n\n# A tibble: 46 x 9\n   hhind  hhid indid  year surname   name    gender  wage location\n   <chr> <dbl> <dbl> <dbl> <chr>     <chr>    <dbl> <dbl> <chr>   \n 1 11        1     1  2019 BROWN     Robert       1  2000 France  \n 2 11        1     1  2020 BROWN     Robert       1  2136 France  \n 3 12        1     2  2019 JONES     Michael      1  2100 France  \n 4 12        1     2  2020 JONES     Michael      1  2362 France  \n 5 13        1     3  2019 MILLER    William      1  2300 France  \n 6 13        1     3  2020 MILLER    William      1  2384 France  \n 7 14        1     4  2019 DAVIS     David        1  1800 France  \n 8 14        1     4  2020 DAVIS     David        1  2090 France  \n 9 21        2     1  2019 RODRIGUEZ Mary         2  3600 England \n10 21        2     1  2020 RODRIGUEZ Mary         2  3784 England \n# … with 36 more rows\n\n\nStata\n\negen hhind=group(hhid indid) \norder hhind hhid indid year * \nsort hhid indid year \nThat’s it, we now have the complete dataframe.\nClean the data\nThere are still some things to do. First, we remark that there are some errors in the column location (England_error and Spain_error) so we correct it:\n\n\n# display the unique values of the column \"location\"\nunique(base_created2$location)\n\n\n[1] \"France\"        \"England\"       \"Spain\"         \"Italy\"        \n[5] \"England_error\" \"Spain_error\"  \n\n# correct the errors\nbase_created2[base_created2 == \"England_error\"] <- \"England\"\nbase_created2[base_created2 == \"Spain_error\"] <- \"Spain\"\nunique(base_created2$location)\n\n\n[1] \"France\"  \"England\" \"Spain\"   \"Italy\"  \n\n\nStata\n\nreplace localisation=\"England\" if localisation==\"England_error\"\nreplace localisation=\"Spain\" if localisation==\"Spain_error\"\nBasically, what we’ve done here is that we have selected every cell in the whole dataframe that had the value England_error (respectively Spain_error) and we replaced these cells by England (Spain). We also need to recode the column gender because binary variables have to take values of 0 or 1, not 1 or 2.\n\n\nbase_created2$gender <- recode(base_created2$gender, `2` = 0)\n\n\n\n\nStata\n\nlabel define genderlab 1 \"M\" 2 \"F\"\nlabel values gender genderlab\nrecode gender (2=0 \"Female\") (1=1 \"Male\"), gen(gender2)\ndrop gender\nrename gender2 gender\nTo have more details on the dataframe, we need to create some labels. To do so, we need the upData function in the Hmisc package.\n\n\nlibrary(Hmisc)\nvar.labels <- c(hhind = \"individual's ID\",\n                hhid = \"household's ID\",\n                indid = \"individual's ID in the household\",\n                year = \"year\",\n                surname = \"surname\",\n                name = \"name\",\n                gender = \"1 if male, 0 if female\",\n                wage = \"wage\",\n                location = \"household's location\")\nbase_created2 <- upData(base_created2, labels = var.labels)\n\n\n\n\nStata\n\nlabel variable hhind \"individual's ID\"\nlabel variable indid \"household's ID\" \nlabel variable year \"year\"\nlabel variable hhid \"individual's ID in the household\"\nlabel variable surname \"Surname\"\nlabel variable name \"Name\"\nlabel variable gender \"1 if male, 0 if female\"\nlabel variable wage \"wage\"\nlabel variable location \"household's location\"\nWe can see the result with:\n\n\ncontents(base_created2)\n\n\n\nData frame:base_created2    46 observations and 9 variables    Maximum # NAs:0\n\n                                   Labels     Class   Storage\nhhind                     individual's ID character character\nhhid                       household's ID   integer   integer\nindid    individual's ID in the household   integer   integer\nyear                                 year   integer   integer\nsurname                           surname character character\nname                                 name character character\ngender             1 if male, 0 if female   integer   integer\nwage                                 wage   integer   integer\nlocation             household's location character character\n\nNow that our dataframe is clean and detailed, we can compute some descriptive statistics. But before doing it, we might want to save it:\n\nwrite.xlsx(base_created2, file = here(\"Bases_Created/modified_base.xlsx\")\n\n\nStata\n\ncd ..\\Bases_Created  \nexport excel using \"modified_base.xls\", replace\nDescriptive Statistics\nFirst of all, if we want to check the number of people per location or gender and per year, we use the table function:\n\n\ntable(base_created2$gender, base_created2$year)\n\n\n   \n    2019 2020\n  0    9    9\n  1   14   14\n\ntable(base_created2$location, base_created2$year)\n\n\n         \n          2019 2020\n  England    6    6\n  France    12   12\n  Italy      1    1\n  Spain      4    4\n\n\nStata\n\ntab gender if year==2019  \ntab location if year==2019 \nTo have more detailed statistics, you can use many functions. Here, we use the function describe from the Hmisc package\n\n\ndescribe(base_created2)\n\n\nbase_created2 \n\n 9  Variables      46  Observations\n----------------------------------------------------------------------\nhhind : individual's ID \n       n  missing distinct \n      46        0       23 \n\nlowest : 11 12 13 14 21, highest: 71 72 81 82 83\n----------------------------------------------------------------------\nhhid : household's ID \n       n  missing distinct     Info     Mean      Gmd \n      46        0        8    0.975    4.217    2.783 \n\nlowest : 1 2 3 4 5, highest: 4 5 6 7 8\n                                                          \nValue          1     2     3     4     5     6     7     8\nFrequency      8     8     4     2    10     4     4     6\nProportion 0.174 0.174 0.087 0.043 0.217 0.087 0.087 0.130\n----------------------------------------------------------------------\nindid : individual's ID in the household \n       n  missing distinct     Info     Mean      Gmd \n      46        0        5    0.923    2.217    1.306 \n\nlowest : 1 2 3 4 5, highest: 1 2 3 4 5\n                                        \nValue          1     2     3     4     5\nFrequency     16    14     8     6     2\nProportion 0.348 0.304 0.174 0.130 0.043\n----------------------------------------------------------------------\nyear \n       n  missing distinct     Info     Mean      Gmd \n      46        0        2     0.75     2020   0.5111 \n                    \nValue      2019 2020\nFrequency    23   23\nProportion  0.5  0.5\n----------------------------------------------------------------------\nsurname \n       n  missing distinct \n      46        0       23 \n\nlowest : ANDERSON BROWN    DAVIS    DOE      JACKSON \nhighest: THOMAS   THOMPSON WHITE    WILLIAMS WILSON  \n----------------------------------------------------------------------\nname \n       n  missing distinct \n      46        0       23 \n\nlowest : Barbara Charles Daniel  David   Donald \nhighest: Richard Robert  Susan   Thomas  William\n----------------------------------------------------------------------\ngender : 1 if male, 0 if female \n       n  missing distinct     Info      Sum     Mean      Gmd \n      46        0        2    0.715       28   0.6087    0.487 \n\n----------------------------------------------------------------------\nwage \n       n  missing distinct     Info     Mean      Gmd      .05 \n      46        0       37    0.998     2059    477.4     1627 \n     .10      .25      .50      .75      .90      .95 \n    1692     1800     1901     2098     2373     3575 \n\nlowest : 1397 1600 1608 1683 1690, highest: 2384 3500 3600 3782 3784\n----------------------------------------------------------------------\nlocation : household's location \n       n  missing distinct \n      46        0        4 \n                                          \nValue      England  France   Italy   Spain\nFrequency       12      24       2       8\nProportion   0.261   0.522   0.043   0.174\n----------------------------------------------------------------------\n\n\nStata\n\nsum *, detail\nbut you can also try the function summary (automatically available in base R), stat.desc in pastecs, skim in skimr or even makeDataReport in dataMaid to have a complete PDF report summarizing your data. To summarize data under certain conditions (e.g. to have the average wage for each location), you can use dplyr:\n\n\n# you can change the argument in group_by() by gender for example\nbase_created2 %>%\n  group_by(location) %>%\n  summarize_at(.vars = \"wage\", .funs = \"mean\")\n\n\n# A tibble: 4 x 2\n  location    wage\n  <labelled> <dbl>\n1 England    2452.\n2 France     1935.\n3 Italy      1801 \n4 Spain      1905.\n\n\nStata\n\ntabstat wage if year==2019, stats(N mean sd min max p25 p50 p75) by(location)\ntabstat wage if year==2020, stats(N mean sd min max p25 p50 p75) by(location)\nPlots\nFinally, we want to plot some data to include in our report or article (or anything else). ggplot2 is THE reference to make plots with R. The ggplot function does not create a graph but tells what is the data you are going to use and the aesthetics (aes). Here, we want to display the wages in a histogram and to distinguish them per year. Therefore, we want to fill the bars according to the year. To precise the type of graph we want, we add + geom_histogram() after ggplot. You may change the number of bins to have a more precise histogram.\n\n\nlibrary(ggplot2)\nhist1 <- ggplot(data = base_created2, \n                mapping = aes(wage, fill = factor(year))) +\n  geom_histogram(bins = 10)\nhist1\n\n\n\n\n\nStata\n\nhistogram wage if year==2019, saving(Hist1, replace) bin(10) freq title(\"Year 2019\") ytitle(\"Frequency\") \nhistogram wage if year==2020, saving(Hist2, replace) bin(10) freq title(\"Year 2020\") ytitle(\"Frequency\")\nIf you prefer one histogram per year, you can use the facet_wrap() argument, as below.\n\n\nhist2 <- ggplot(data = base_created2, \n                mapping = aes(wage, fill = factor(year))) +\n  geom_histogram(bins = 10) +\n  facet_wrap(vars(year))\nhist2\n\n\n\n\n\nStata\n\ngraph combine Hist1.gph Hist2.gph, col(2) xsize(10) ysize(5) iscale(1.5) title(\"{bf:Wage distribution per year}\")\nFinally, you may want to export these graphs. To do so, we use ggsave (you can replace .pdf by .eps or .png if you want):\n\n\nggsave(here(\"Figures/plot1.pdf\"), plot = hist1)\n\n\n\n\nStata\n\ngraph export Histogram1.pdf,  replace\nThat’s it! In this first post, you have seen how to import, clean and tidy datasets, and how to make some descriptive statistics and some plots. I hope this was helpful to you!\n\nSession Info\nThis is my session info, so that you can see the versions of packages used. This is useful if the results in my post are no longer reproducible because packages changed. The packages with a star (*) are those explicitely called in the script.\n\n─ Session info ─────────────────────────────────────────────────────\n setting  value                       \n version  R version 4.0.4 (2021-02-15)\n os       Ubuntu 18.04.5 LTS          \n system   x86_64, linux-gnu           \n ui       X11                         \n language en                          \n collate  fr_FR.UTF-8                 \n ctype    fr_FR.UTF-8                 \n tz       Europe/Paris                \n date     2021-03-16                  \n\n─ Packages ─────────────────────────────────────────────────────────\n package      * version date       lib\n assertthat     0.2.1   2019-03-21 [1]\n backports      1.2.1   2020-12-09 [1]\n base64enc      0.1-3   2015-07-28 [1]\n bslib          0.2.4   2021-01-25 [1]\n cellranger     1.1.0   2016-07-27 [1]\n checkmate      2.0.0   2020-02-06 [1]\n cli            2.3.1   2021-02-23 [1]\n cluster        2.1.1   2021-02-14 [4]\n colorspace     2.0-0   2020-11-11 [1]\n crayon         1.4.1   2021-02-08 [1]\n data.table     1.13.6  2020-12-30 [1]\n DBI            1.1.1   2021-01-15 [1]\n debugme        1.1.0   2017-10-22 [1]\n digest         0.6.27  2020-10-24 [1]\n distill        1.2.2   2021-03-04 [1]\n downlit        0.2.1   2020-11-04 [1]\n dplyr        * 1.0.5   2021-03-05 [1]\n ellipsis       0.3.1   2020-05-15 [1]\n evaluate       0.14    2019-05-28 [1]\n fansi          0.4.2   2021-01-15 [1]\n farver         2.0.3   2020-01-16 [1]\n foreign        0.8-81  2020-12-22 [4]\n Formula      * 1.2-4   2020-10-16 [1]\n generics       0.1.0   2020-10-31 [1]\n ggplot2      * 3.3.3   2020-12-30 [1]\n glue           1.4.2   2020-08-27 [1]\n gridExtra      2.3     2017-09-09 [1]\n gtable         0.3.0   2019-03-25 [1]\n here         * 1.0.1   2020-12-13 [1]\n highr          0.8     2019-03-20 [1]\n Hmisc        * 4.4-2   2020-11-29 [1]\n htmlTable      2.1.0   2020-09-16 [1]\n htmltools      0.5.1.1 2021-01-22 [1]\n htmlwidgets    1.5.3   2020-12-10 [1]\n jpeg           0.1-8.1 2019-10-24 [1]\n jquerylib      0.1.3   2020-12-17 [1]\n jsonlite       1.7.2   2020-12-09 [1]\n knitr          1.31    2021-01-27 [1]\n labeling       0.4.2   2020-10-20 [1]\n lattice      * 0.20-41 2020-04-02 [4]\n latticeExtra   0.6-29  2019-12-19 [1]\n lifecycle      1.0.0   2021-02-15 [1]\n magrittr       2.0.1   2020-11-17 [1]\n Matrix         1.3-2   2021-01-06 [4]\n munsell        0.5.0   2018-06-12 [1]\n nnet           7.3-15  2021-01-24 [4]\n pillar         1.5.1   2021-03-05 [1]\n pkgconfig      2.0.3   2019-09-22 [1]\n png            0.1-7   2013-12-03 [1]\n purrr          0.3.4   2020-04-17 [1]\n R6             2.5.0   2020-10-28 [1]\n RColorBrewer   1.1-2   2014-12-07 [1]\n Rcpp           1.0.6   2021-01-15 [1]\n readxl       * 1.3.1   2019-03-13 [1]\n rlang          0.4.10  2020-12-30 [1]\n rmarkdown      2.6.6   2021-02-08 [1]\n rpart          4.1-15  2019-04-12 [4]\n rprojroot      2.0.2   2020-11-15 [1]\n rstudioapi     0.13    2020-11-12 [1]\n sass           0.3.1   2021-01-24 [1]\n scales         1.1.1   2020-05-11 [1]\n sessioninfo    1.1.1   2018-11-05 [1]\n stringi        1.5.3   2020-09-09 [1]\n stringr        1.4.0   2019-02-10 [1]\n survival     * 3.2-7   2020-09-28 [4]\n tibble         3.1.0   2021-02-25 [1]\n tidyr        * 1.1.2   2020-08-27 [1]\n tidyselect     1.1.0   2020-05-11 [1]\n utf8           1.2.1   2021-03-12 [1]\n vctrs          0.3.6   2020-12-17 [1]\n withr          2.4.1   2021-01-26 [1]\n xfun           0.20    2021-01-06 [1]\n yaml           2.2.1   2020-02-01 [1]\n source                            \n CRAN (R 4.0.0)                    \n CRAN (R 4.0.3)                    \n CRAN (R 4.0.0)                    \n CRAN (R 4.0.3)                    \n CRAN (R 4.0.0)                    \n CRAN (R 4.0.0)                    \n CRAN (R 4.0.4)                    \n CRAN (R 4.0.3)                    \n CRAN (R 4.0.3)                    \n CRAN (R 4.0.3)                    \n CRAN (R 4.0.3)                    \n CRAN (R 4.0.3)                    \n CRAN (R 4.0.2)                    \n CRAN (R 4.0.3)                    \n local                             \n CRAN (R 4.0.3)                    \n CRAN (R 4.0.4)                    \n CRAN (R 4.0.0)                    \n CRAN (R 4.0.0)                    \n CRAN (R 4.0.3)                    \n CRAN (R 4.0.0)                    \n CRAN (R 4.0.3)                    \n CRAN (R 4.0.3)                    \n CRAN (R 4.0.3)                    \n CRAN (R 4.0.3)                    \n CRAN (R 4.0.2)                    \n CRAN (R 4.0.0)                    \n CRAN (R 4.0.0)                    \n CRAN (R 4.0.3)                    \n CRAN (R 4.0.0)                    \n CRAN (R 4.0.3)                    \n CRAN (R 4.0.3)                    \n CRAN (R 4.0.3)                    \n CRAN (R 4.0.3)                    \n CRAN (R 4.0.0)                    \n CRAN (R 4.0.3)                    \n CRAN (R 4.0.3)                    \n CRAN (R 4.0.3)                    \n CRAN (R 4.0.3)                    \n CRAN (R 4.0.0)                    \n CRAN (R 4.0.0)                    \n CRAN (R 4.0.4)                    \n CRAN (R 4.0.3)                    \n CRAN (R 4.0.3)                    \n CRAN (R 4.0.0)                    \n CRAN (R 4.0.3)                    \n CRAN (R 4.0.4)                    \n CRAN (R 4.0.0)                    \n CRAN (R 4.0.0)                    \n CRAN (R 4.0.0)                    \n CRAN (R 4.0.3)                    \n CRAN (R 4.0.0)                    \n CRAN (R 4.0.3)                    \n CRAN (R 4.0.0)                    \n CRAN (R 4.0.3)                    \n Github (rstudio/rmarkdown@de0e2ec)\n CRAN (R 4.0.0)                    \n CRAN (R 4.0.3)                    \n CRAN (R 4.0.3)                    \n CRAN (R 4.0.4)                    \n CRAN (R 4.0.0)                    \n CRAN (R 4.0.0)                    \n CRAN (R 4.0.2)                    \n CRAN (R 4.0.0)                    \n CRAN (R 4.0.2)                    \n CRAN (R 4.0.4)                    \n CRAN (R 4.0.2)                    \n CRAN (R 4.0.0)                    \n CRAN (R 4.0.4)                    \n CRAN (R 4.0.3)                    \n CRAN (R 4.0.3)                    \n CRAN (R 4.0.3)                    \n CRAN (R 4.0.0)                    \n\n[1] /home/etienne/R/x86_64-pc-linux-gnu-library/4.0\n[2] /usr/local/lib/R/site-library\n[3] /usr/lib/R/site-library\n[4] /usr/lib/R/library\n\n\n\n\n",
    "preview": "posts/2020-01-22-first-contact/distill-preview.png",
    "last_modified": "2023-02-16T14:16:35+00:00",
    "input_file": {},
    "preview_width": 1248,
    "preview_height": 768
  },
  {
    "path": "posts/2019-12-01-why-moving/",
    "title": "Why you should move from Stata to R",
    "description": "Some reasons that explain why I prefer R to Stata.",
    "author": [
      {
        "name": "Etienne Bacher",
        "url": {}
      }
    ],
    "date": "2019-12-01",
    "categories": [],
    "contents": "\nBefore going into the details about studying economics with R, it makes sense to explain why you should use R compared to Stata. Before I start, please note that I have been using Stata occasionally for about a year whereas I spend much more time on R so I may forget some features that Stata has and that I am not aware of. However, I believe that what I have made with Stata corresponds to most Master students’ experiences, e.g. data cleaning and treatment, data analysis, econometrics, etc.\nNow we can begin.\nReason 1: R is free\nThat may seem a false argument for some people, especially because in many universities, students have freely access to Stata. However, in my experience, I know that we frequently want to work home or in group on some projects and therefore we need Stata on our personal laptop. Therefore, some cracked versions circulate between students and it is well-known that when downloading illegally softwares (and movies, TV shows, etc.), there’s always a risk of being infected by a virus. I don’t know if this happens often or not, maybe you will never suffer from it, but it would be just stupid to have to suffer from a hacking just because the statistical software was not free. That’s the big advantage of R: it is completely free. Whatever your operating system, you can download base R and every package you want and it won’t cost any money.\nReason 2: R is open-source\nI have already heard one of my professor complaining about the fact that Stata is a “black box” (not like those in planes but more like an opaque system). On the contrary, R is open-source (meaning that anyone can see the code, contribute to it and distribute it) and the code behind the functions you use is easily visible with just one click. That accessiblity entails the next argument, which is the diversity of packages.\nReason 3: the diversity of packages\nThere is A LOT of packages on R (more than 10,000 on CRAN as shown here, and it was in 2017!). Additionally to the packages on CRAN (the Comprehensive R Archive Network, where the stable versions of the packages are), some packages are hosted only on Github and others are made by users or companies only for private purposes and will not be released on open-source. The packages are the strength of R. Base-R (i.e. the basic version of R, without any packages manually installed) is a great start to learn how to code and to manipulate data, and in fact you can stay with base-R only if you limit your study to some basic data analysis. However, base-R may also be hard to learn and not very esthetic. Moreover, some packages allow to extend R functionalities beyond base-R.\nThis is a list (far from being exhaustive) of some of the most important packages for students in economics:\ntidyverse: this is a portmanteau word of tidy and universe. It regroups more than 20 packages for data import (readr), data treatment (dplyr, tidyr…), graphics (ggplot2), etc.\nrmarkdown: as a student (in economics but in other domains too), you will have to write a Master’s thesis and before that, you will certainly have to do some group projects, sort of small reports. When the data analysis will be done, you will have to write your report and to incorporate the results in the document. That can lead to some mistakes/typos that can lead to big errors, like changes in p-values between the results obtained in the statistical software and the word processing program (whether it is LaTeX or Microsoft Word). To guarantee that you won’t make this sort of mistakes, the most effective way is to write directly in R and to incorporate your code directly in the text. Therefore, in one document, you will have the text of your report and the code needed for the data analysis, all of that ready to be converted in PDF, HTML or Word.\nshiny: while rmarkdown promotes reproducibility by keeping all in a unique document, shiny goes a step further. Once you have made some data analysis, you can put it in a Shiny application (“app”) that will create a web page in which people interested in your work will be able to reproduce your results but also to check wether they are robust. Indeed, Shiny makes results reactive, meaning that you can change the sample size or the years or anything else you want and the results will automatically adapt. That is very useful in econometrics, where robustness is very important and always checked. There exist thousands and thousands of R packages which cover a large spectrum of the problems and questions you might have, and that is definitely a strength of R.\nReason 4: the community\nIt is certain that will have some problems with your code, everybody has. The documentation is very complete and allows to solve most of them, but sometimes you may need to seek for help online. It is quite probable that the question you ask yourself has already been asked by somebody else before you and if it has, you will find the answer on StackOverflow or on the RStudio Community.\nReason 5: RStudio is just a pleasure to use\nRStudio is the most used IDE for R (Integrated Desktop Environment, not the language but a software that permits to use more easily the language). It has tons of shortcuts and is very customizable. It is a real pleasure to use, and it can be linked to other great services like GitHub (maybe you don’t know what it is so in a few words, it is a service that permits version control i.e. keep a trace of every change in a project, whether it is a report, a package or a web application).\n\n\n\n",
    "preview": {},
    "last_modified": "2023-02-16T14:16:35+00:00",
    "input_file": {}
  }
]
